<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shepherd&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://humshieh.github.io/"/>
  <updated>2019-09-02T10:40:40.806Z</updated>
  <id>https://humshieh.github.io/</id>
  
  <author>
    <name>Shepherd Xie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud Contract 实践</title>
    <link href="https://humshieh.github.io/2019/08/30/Spring-Cloud-Contract-%E5%AE%9E%E8%B7%B5/"/>
    <id>https://humshieh.github.io/2019/08/30/Spring-Cloud-Contract-实践/</id>
    <published>2019-08-30T08:18:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Contract-实践"><a href="#Spring-Cloud-Contract-实践" class="headerlink" title="Spring Cloud Contract 实践"></a>Spring Cloud Contract 实践</h1><p>由于工作需要，第一次接触 Spring Cloud Contract 这个组件。中文翻译为 契约 ，它是一个用于微服务测试组件。在正常的微服务开发过程中，我们要进行测试时，通常情况下要启动全部的微服务项目，这个组件可以使我们在不启动其他微服务时完成测试。</p><a id="more"></a><h2 id="什么是-Spring-Cloud-Contract"><a href="#什么是-Spring-Cloud-Contract" class="headerlink" title="什么是 Spring Cloud Contract"></a>什么是 Spring Cloud Contract</h2><p>在正常的情况下，我们的微服务是由数量众多的调用方服务与被调用方服务组成：</p><p><img src="https://cloud.spring.io/spring-cloud-contract/reference/html/images/Deps.png" alt="一般的微服务架构"></p><p>这种调用方式往往伴随着链式服务调用，如果想要测试左上角的服务，一般来说会有两个方法：</p><ul><li>部署所有的微服务</li><li>在测试中模拟其他的微服务调用</li></ul><p>这两种方式各有其优缺点。</p><p><strong>部署所有的微服务</strong></p><ul><li>优点<ul><li>可以模拟生产环境</li><li>测试服务之间的真实通信</li></ul></li><li>缺点<ul><li>需要启动所有的配套服务、数据库和其他关联项目</li><li>难以调试</li></ul></li></ul><p><strong>在测试中模拟其他的微服务调用</strong></p><ul><li>优点<ul><li>无需依赖于其他的服务</li><li>响应迅速</li></ul></li><li>缺点<ul><li>模拟服务的可靠性不足</li></ul></li></ul><p>为了解决以上的问题，Spring 推出了 Spring Cloud Contract ，主要的思想是提供快速的测试响应而无需配置其他的微服务。在引入 Spring Cloud Contract 后，应用的依赖关系会变为如下图所示：</p><p><img src="https://cloud.spring.io/spring-cloud-contract/reference/html/images/Stubs2.png" alt="使用了 Spring Cloud Contract"></p><p>Spring Cloud Contract 用来保证所使用的的 stubs 是由被调用方创建及维护的。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>Spring Cloud Contract 要求在被调用方声明并实现 契约 ，来由调用方进行使用。</p><h3 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h3><p>引入 Maven 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-contract-verifier<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入 Maven 插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-contract-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-contract.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以 <code>REST</code> 形式编写 stubs 并实现，可以使用 <code>Grovvy</code> 或者 <code>Yaml</code> ，文件默认位于 <code>/src/test/resources/contracts</code> 目录下。</p><p>对于 HTTP stubs 需要指定路径、请求方法、状态码等信息，示例如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> contracts</span><br><span class="line"></span><br><span class="line">org.springframework.cloud.contract.spec.Contract.make &#123;</span><br><span class="line">    request &#123;</span><br><span class="line">        url <span class="string">"/api"</span></span><br><span class="line">        method GET()</span><br><span class="line">        headers &#123;</span><br><span class="line">            header(contentType(), applicationJsonUtf8())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response &#123;</span><br><span class="line">        status OK()</span><br><span class="line">        headers &#123;</span><br><span class="line">            header(contentType(), applicationJsonUtf8())</span><br><span class="line">        &#125;</span><br><span class="line">        body([<span class="string">"apple"</span>, <span class="string">"banana"</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">request:</span></span><br><span class="line"><span class="attr">  method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">  url:</span> <span class="string">/api</span></span><br><span class="line"><span class="attr">  headers:</span></span><br><span class="line"><span class="attr">    Content-Type:</span> <span class="string">application/json;charset=UTF-8</span></span><br><span class="line"><span class="attr">response:</span></span><br><span class="line"><span class="attr">  status:</span> <span class="number">200</span></span><br><span class="line"><span class="attr">  headers:</span></span><br><span class="line"><span class="attr">    Content-Type:</span> <span class="string">application/json;charset=UTF-8</span></span><br><span class="line"><span class="attr">  body:</span> <span class="string">["apple",</span> <span class="string">"banana"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>指定测试基类：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-contract-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">baseClassForTests</span>&gt;</span>com.hello.spring.cloud.contract.provider.HelloSpringCloudContractProviderApplicationTests<span class="tag">&lt;/<span class="name">baseClassForTests</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指定测试接口实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  RestAssuredMockMvc.standaloneSetup(<span class="keyword">new</span> ApiController());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>./mvnw clean install</code> 自动生成测试并进行检验，生成的测试包默认在 <code>target/generated-test-sources</code> 目录下。自动生成的测试类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate_simpleProvider</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// given:</span></span><br><span class="line">    MockMvcRequestSpecification request = given();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// when:</span></span><br><span class="line">        ResponseOptions response = given().spec(request)</span><br><span class="line">          .get(<span class="string">"/api"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// then:</span></span><br><span class="line">        assertThat(response.statusCode()).isEqualTo(<span class="number">200</span>);</span><br><span class="line">        assertThat(response.header(<span class="string">"Content-Type"</span>)).isEqualTo(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">    <span class="comment">// and:</span></span><br><span class="line">        DocumentContext parsedJson = JsonPath.parse(response.getBody().asString());</span><br><span class="line">        assertThatJson(parsedJson).arrayField().contains(<span class="string">"apple"</span>).value();</span><br><span class="line">        assertThatJson(parsedJson).arrayField().contains(<span class="string">"banana"</span>).value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，必须要在测试基类中指定 <code>MockMvc</code> 实例，否则会报如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: </span><br><span class="line">You haven&apos;t configured a MockMVC instance. You can do this statically</span><br><span class="line"></span><br><span class="line">RestAssuredMockMvc.mockMvc(..)</span><br><span class="line">RestAssuredMockMvc.standaloneSetup(..);</span><br><span class="line">RestAssuredMockMvc.webAppContextSetup(..);</span><br><span class="line"></span><br><span class="line">or using the DSL:</span><br><span class="line"></span><br><span class="line">given().</span><br><span class="line">             mockMvc(..). ..</span><br></pre></td></tr></table></figure><p>当服务中包含多个 <code>Controller</code> 实例时，也可以使用如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WebApplicationContext context;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">RestAssuredMockMvc.webAppContextSetup(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>添加 Maven 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-contract-stub-runner<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写测试用例，使用 <code>@AutoConfigureStubRunner</code> 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.NONE)</span><br><span class="line"><span class="meta">@AutoConfigureStubRunner</span>(</span><br><span class="line">        ids = &#123;</span><br><span class="line">                <span class="string">"com.hello:hello-spring-cloud-contract-provider-groovy:+:stubs:8081"</span>,</span><br><span class="line">                <span class="string">"com.hello:hello-spring-cloud-contract-provider-yaml:+:stubs:8082"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        stubsMode = StubRunnerProperties.StubsMode.LOCAL</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringCloudContractConsumerApplicationTests</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>当 stubs 不在本地仓库时，使用如下方式从远程仓库获取 stubs ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.NONE)</span><br><span class="line"><span class="meta">@AutoConfigureStubRunner</span>(</span><br><span class="line">        ids = &#123;</span><br><span class="line">                <span class="string">"com.hello:hello-spring-cloud-contract-provider-groovy:+:stubs:8081"</span>,</span><br><span class="line">                <span class="string">"com.hello:hello-spring-cloud-contract-provider-yaml:+:stubs:8082"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        repositoryRoot = <span class="string">"https://repo.spring.io/libs-snapshot"</span>,</span><br><span class="line">        stubsMode = StubRunnerProperties.StubsMode.REMOTE</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringCloudContractConsumerApplicationTests</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>至此，Spring Cloud Contract 的基本功能已经全部实现。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring Cloud Contract 为我们在微服务测试过程中提供了一个有效的解决方法，可以说是微服务部分 TDD 的最佳实践。</p><hr><blockquote><p>参考文献：</p><ul><li><a href="https://cloud.spring.io/spring-cloud-contract/reference/html/index.html" target="_blank" rel="noopener">Spring Cloud Contract Reference Documentation</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Cloud-Contract-实践&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Contract-实践&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Contract 实践&quot;&gt;&lt;/a&gt;Spring Cloud Contract 实践&lt;/h1&gt;&lt;p&gt;由于工作需要，第一次接触 Spring Cloud Contract 这个组件。中文翻译为 契约 ，它是一个用于微服务测试组件。在正常的微服务开发过程中，我们要进行测试时，通常情况下要启动全部的微服务项目，这个组件可以使我们在不启动其他微服务时完成测试。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="https://humshieh.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="https://humshieh.github.io/tags/Spring-Cloud/"/>
    
      <category term="Test" scheme="https://humshieh.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>idea的一些常用插件</title>
    <link href="https://humshieh.github.io/2019/07/11/idea%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <id>https://humshieh.github.io/2019/07/11/idea的一些常用插件/</id>
    <published>2019-07-11T02:45:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<p>jRebel: 热部署<br>GsonFormat: json转pojo<br>mybatis<br>lombok<br>GitToolBox</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jRebel: 热部署&lt;br&gt;GsonFormat: json转pojo&lt;br&gt;mybatis&lt;br&gt;lombok&lt;br&gt;GitToolBox&lt;/p&gt;

      
    
    </summary>
    
      <category term="IDEA" scheme="https://humshieh.github.io/categories/IDEA/"/>
    
    
  </entry>
  
  <entry>
    <title>dnsmasq</title>
    <link href="https://humshieh.github.io/2019/04/25/dnsmasq/"/>
    <id>https://humshieh.github.io/2019/04/25/dnsmasq/</id>
    <published>2019-04-25T14:17:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dnsmasq"><a href="#dnsmasq" class="headerlink" title="dnsmasq"></a>dnsmasq</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  dnsmasq:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">jpillora/dnsmasq:latest</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">dnsmasq</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"53:53/udp"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"53:53/tcp"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8100:8080"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./conf/dnsmasq.conf:/etc/dnsmasq.conf:rw</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./conf/resolv.conf:/etc/resolv.conf:ro</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./conf/hosts:/etc/hosts:ro</span></span><br><span class="line"><span class="attr">    cap_add:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">NET_ADMIN</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">HTTP_USER=admin</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">HTTP_PASS=admin</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dnsmasq&quot;&gt;&lt;a href=&quot;#dnsmasq&quot; class=&quot;headerlink&quot; title=&quot;dnsmasq&quot;&gt;&lt;/a&gt;dnsmasq&lt;/h1&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ELK</title>
    <link href="https://humshieh.github.io/2019/04/25/elasticsearch/"/>
    <id>https://humshieh.github.io/2019/04/25/elasticsearch/</id>
    <published>2019-04-25T14:17:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  elasticsearch:</span> </span><br><span class="line"><span class="comment">#    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.0</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">elasticsearch:6.4.0</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="attr">    dns:</span> <span class="number">47.93</span><span class="number">.241</span><span class="number">.176</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">discovery.type=single-node</span></span><br><span class="line"><span class="comment">#      - cluster.name=esCluster</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    ports:</span>    </span><br><span class="line"><span class="bullet">      -</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./esdata/:/usr/share/elasticsearch/data/</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./plugins/:/usr/share/elasticsearch/plugins/</span></span><br><span class="line"><span class="attr">  kibana:</span></span><br><span class="line"><span class="comment">#    image: docker.elastic.co/kibana/kibana:6.4.0</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">kibana:6.4.0</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="attr">    dns:</span> <span class="number">47.93</span><span class="number">.241</span><span class="number">.176</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="comment">#    environment:</span></span><br><span class="line"><span class="comment">#      - SERVER_NAME=kibana</span></span><br><span class="line"><span class="comment">#      - ELASTICSEARCH_URL=http://elasticsearch:9200</span></span><br><span class="line"><span class="comment">#      - ELASTICSEARCH_USERNAME=elastic</span></span><br><span class="line"><span class="comment">#      - ELASTICSEARCH_PASSWORD=changeme</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./kibana.yml:/usr/share/kibana/config/kibana.yml</span></span><br><span class="line"><span class="attr">  logstash:</span></span><br><span class="line"><span class="comment">#    image: docker.elastic.co/kibana/logstash:6.4.0</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">logstash:6.4.0</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">logstash</span></span><br><span class="line"><span class="attr">    dns:</span> <span class="number">47.93</span><span class="number">.241</span><span class="number">.176</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">logstash</span> <span class="bullet">-f</span> <span class="string">/usr/share/logstash/config/logstash-mysql.conf</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./config/:/usr/share/logstash/config/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ELK&quot;&gt;&lt;a href=&quot;#ELK&quot; class=&quot;headerlink&quot; title=&quot;ELK&quot;&gt;&lt;/a&gt;ELK&lt;/h1&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="https://humshieh.github.io/2019/04/25/nginx/"/>
    <id>https://humshieh.github.io/2019/04/25/nginx/</id>
    <published>2019-04-25T14:17:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.4'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  nginx:</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="comment"># network_mode: host</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./wwwroot:/usr/share/nginx/wwwroot</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    client_max_body_size 0;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  192.168.80.135;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            add_header Access-Control-Allow-Origin *;</span><br><span class="line">            add_header Access-Control-Allow-Headers X-Requested-With;</span><br><span class="line">            add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span><br><span class="line"></span><br><span class="line">            root   /usr/share/nginx/wwwroot;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name git.orkva.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://192.168.80.135:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name hub.orkva.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://192.168.80.135:8082;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name registry.orkva.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://192.168.80.135:5000;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name mvn.orkva.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://47.93.241.176:8081;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx&quot;&gt;&lt;a href=&quot;#Nginx&quot; class=&quot;headerlink&quot; title=&quot;Nginx&quot;&gt;&lt;/a&gt;Nginx&lt;/h1&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OwnCloud</title>
    <link href="https://humshieh.github.io/2019/04/25/owncloud/"/>
    <id>https://humshieh.github.io/2019/04/25/owncloud/</id>
    <published>2019-04-25T14:17:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OwnCloud"><a href="#OwnCloud" class="headerlink" title="OwnCloud"></a>OwnCloud</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.1'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  files:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  mysql:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  backup:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  owncloud:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">owncloud/server:latest</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_DOMAIN=www.orkva.com</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_DB_TYPE=mysql</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_DB_NAME=owncloud</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_DB_USERNAME=owncloud</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_DB_PASSWORD=owncloud</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_DB_HOST=db</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_ADMIN_USERNAME=admin</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_ADMIN_PASSWORD=admin</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_MYSQL_UTF8MB4=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_REDIS_ENABLED=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">OWNCLOUD_REDIS_HOST=redis</span></span><br><span class="line"><span class="attr">    healthcheck:</span></span><br><span class="line"><span class="attr">      test:</span> <span class="string">["CMD",</span> <span class="string">"/usr/bin/healthcheck"</span><span class="string">]</span></span><br><span class="line"><span class="attr">      interval:</span> <span class="number">30</span><span class="string">s</span></span><br><span class="line"><span class="attr">      timeout:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">      retries:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - files:</span><span class="string">/mnt/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">webhippie/mariadb:latest</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MARIADB_ROOT_PASSWORD=owncloud</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MARIADB_USERNAME=owncloud</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MARIADB_PASSWORD=owncloud</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MARIADB_DATABASE=owncloud</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MARIADB_MAX_ALLOWED_PACKET=128M</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MARIADB_INNODB_LOG_FILE_SIZE=64M</span></span><br><span class="line"><span class="attr">    healthcheck:</span></span><br><span class="line"><span class="attr">      test:</span> <span class="string">["CMD",</span> <span class="string">"/usr/bin/healthcheck"</span><span class="string">]</span></span><br><span class="line"><span class="attr">      interval:</span> <span class="number">30</span><span class="string">s</span></span><br><span class="line"><span class="attr">      timeout:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">      retries:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - mysql:</span><span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="attr">      - backup:</span><span class="string">/var/lib/backup</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">webhippie/redis:latest</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">REDIS_DATABASES=1</span></span><br><span class="line"><span class="attr">    healthcheck:</span></span><br><span class="line"><span class="attr">      test:</span> <span class="string">["CMD",</span> <span class="string">"/usr/bin/healthcheck"</span><span class="string">]</span></span><br><span class="line"><span class="attr">      interval:</span> <span class="number">30</span><span class="string">s</span></span><br><span class="line"><span class="attr">      timeout:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">      retries:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - redis:</span><span class="string">/var/lib/redis</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OwnCloud&quot;&gt;&lt;a href=&quot;#OwnCloud&quot; class=&quot;headerlink&quot; title=&quot;OwnCloud&quot;&gt;&lt;/a&gt;OwnCloud&lt;/h1&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>空客</title>
    <link href="https://humshieh.github.io/2019/04/20/%E7%A9%BA%E5%AE%A2/"/>
    <id>https://humshieh.github.io/2019/04/20/空客/</id>
    <published>2019-04-20T09:13:05.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="空客"><a href="#空客" class="headerlink" title="空客"></a>空客</h1><h2 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h2><ul><li><a href="https://teddysun.com/486.html" target="_blank" rel="noopener">SS</a></li><li><a href="https://github.com/233boy/v2ray" target="_blank" rel="noopener">V2Ray</a></li><li><a href="https://github.com/hongwenjun/vps_setup" target="_blank" rel="noopener">WireGuard</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;空客&quot;&gt;&lt;a href=&quot;#空客&quot; class=&quot;headerlink&quot; title=&quot;空客&quot;&gt;&lt;/a&gt;空客&lt;/h1&gt;&lt;h2 id=&quot;一键安装脚本&quot;&gt;&lt;a href=&quot;#一键安装脚本&quot; class=&quot;headerlink&quot; title=&quot;一键安装脚本&quot;&gt;&lt;/a&gt;一
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IDEA中打开Dashboard</title>
    <link href="https://humshieh.github.io/2019/01/30/IDEA%E6%89%93%E5%BC%80Dashboard/"/>
    <id>https://humshieh.github.io/2019/01/30/IDEA打开Dashboard/</id>
    <published>2019-01-30T05:30:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>.idea</code> 文件夹中的 <code>workspace.xml</code> 中找到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"RunDashboard"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"ruleStates"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RuleState</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"ConfigurationTypeDashboardGroupingRule"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">RuleState</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RuleState</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"StatusDashboardGroupingRule"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">RuleState</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"contentProportion"</span> <span class="attr">value</span>=<span class="string">"0.28370553"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 <code>Component</code> 中添加下面的内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"configurationTypes"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"SpringBootApplicationConfigurationType"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 &lt;code&gt;.idea&lt;/code&gt; 文件夹中的 &lt;code&gt;workspace.xml&lt;/code&gt; 中找到&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="IDEA" scheme="https://humshieh.github.io/categories/IDEA/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="https://humshieh.github.io/2018/12/16/spring/"/>
    <id>https://humshieh.github.io/2018/12/16/spring/</id>
    <published>2018-12-16T09:23:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<p><img src="./assets/spring-overview.png" alt="Spring Overview"></p><p>[TOC]</p><h1 id="Spring-Framework-Documentation-Version-5-1-0-RELEASE"><a href="#Spring-Framework-Documentation-Version-5-1-0-RELEASE" class="headerlink" title="Spring Framework Documentation Version 5.1.0.RELEASE"></a><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/index.html" target="_blank" rel="noopener">Spring Framework Documentation Version 5.1.0.RELEASE</a></h1><h1 id="Core"><a href="#Core" class="headerlink" title="Core"></a>Core</h1><h2 id="QuickStart"><a href="#QuickStart" class="headerlink" title="QuickStart"></a>QuickStart</h2><ul><li>applicationContext.xml</li><li>BeanFactory/ApplicationContext<ul><li>BeanFactory负责读取bean配置文档，管理bean的加载，实例化，维护bean之间的依赖关系，负责bean的声明周期。</li><li>ApplicationContext除了提供上述BeanFactory所能提供的功能之外，还提供了更完整的框架功能</li></ul></li></ul><h2 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h2><ul><li><code>&lt;bean id=&quot;...&quot; class=&quot;...&quot;/&gt;</code></li><li><code>scope</code> : singleton|prototype|request|session|application|websocket</li><li><code>lazy-init</code> : 默认支持singleton 不支持prototype</li><li>构造方法: 无参/有参</li><li>静态工厂: <code>&lt;bean id=&quot;...&quot; class=&quot;...&quot; factory-method=&quot;...&quot;/&gt;</code></li><li>实例工厂: <code>&lt;bean id=&quot;...&quot; factory-bean=&quot;...&quot; factory-method=&quot;...&quot;/&gt;</code></li></ul><h2 id="Dependency-injection-依赖注入"><a href="#Dependency-injection-依赖注入" class="headerlink" title="Dependency injection - 依赖注入"></a>Dependency injection - 依赖注入</h2><ul><li>property: <code>&lt;property name=&quot;...&quot; value|ref=&quot;...&quot;/&gt;</code></li><li>constructor: <code>&lt;constructor-arg index|name|type=&quot;...&quot; value|ref=&quot;...&quot;/&gt;</code></li><li>p-namespace(property): <code>&lt;bean id=&quot;...&quot; class=&quot;...&quot; p:driverClassName=&quot;...&quot; p:url=&quot;...&quot; p:username=&quot;...&quot; p:password=&quot;...&quot;/&gt;</code></li><li>c-namespace(constructor): <code>&lt;bean id=&quot;...&quot; class=&quot;...&quot; c:_0=&quot;...&quot; c:_1-ref=&quot;...&quot; c:name-ref=&quot;...&quot; c:email=&quot;...&quot;/&gt;</code></li><li>EL(Expression Language): <code>&lt;property name=&quot;...&quot; value=&quot;#{&lt;expression&gt;}&quot;/&gt;</code><ul><li><code>#</code> 是spring提供的EL表达式，用于获取对象的属性与方法</li><li><code>$</code> 用于获取引入的properties文件中key的对应变量的值</li></ul></li><li>复合类型: <code>&lt;property name=&quot;dataSource.driverClassName&quot; value|ref=&quot;...&quot;/&gt;</code></li></ul><h2 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h2><ul><li>@Component|@Repository|@Service|@Controller</li><li>@Autowired|@Inject|@Resource|@Value</li><li>@Scope</li><li>@Required|@Primary|@Qualifier</li><li>@PostConstruct|@PreDestroy</li><li>@ComponentScan</li><li>JUnit4<ul><li>@RunWith(SpringJunit4ClassRunner.class)</li><li>@ContextConfiguration</li></ul></li></ul><h2 id="context-annotation-config"><a href="#context-annotation-config" class="headerlink" title="context:annotation-config"></a><code>context:annotation-config</code></h2><p>在基于主机方式配置Spring时,Spring配置文件applicationContext.xml,你可能会见 <code>&lt;context:annotation-config/&gt;</code> 这样一条配置，它的作用是隐式的向Spring容器注册</p><ul><li><code>AutowiredAnnotationBeanPostProcessor</code></li><li><code>CommonAnnotationBeanPostProcessor</code></li><li><code>PersistenceAnnotationBeanPostProcessor</code></li><li><p><code>RequiredAnnotationBeanPostProcessor</code></p><p>这4个<code>BeanPostProcessor</code>。注册这4个bean处理器主要的作用是为了你的系统能够识别相应的注解。</p></li></ul><ol><li>使用<code>@Autowired</code>注解，需声明<code>AutowiredAnnotationBeanPostProcessor</code>。</li><li>使用<code>@PersistenceContext</code>注解，需声明<code>PersistenceAnnotationBeanPostProcessor</code>。</li><li>使用<code>@Required</code>注解，需声明<code>RequiredAnnotationBeanPostProcessor</code>。</li><li>使用<code>@Resource</code>、<code>@PostConstruct</code>、<code>@PreDestroy</code>等注解须声明<code>CommonAnnotationBeanPostProcessor</code>。</li></ol><h2 id="context-component-scan"><a href="#context-component-scan" class="headerlink" title="context:component-scan"></a><code>context:component-scan</code></h2><p>它的<code>base-package</code>属性指定了需要扫描的类包，类包及其递归子包中所有的类都会被处理。</p><blockquote><p>使用 <code>&lt;context：component-scan&gt;</code> 隐式启用 <code>&lt;context：annotation-config&gt;</code> 的功能。使用 <code>&lt;context：component-scan&gt;</code> 时，通常不需要包含 <code>&lt;context：annotation-config&gt;</code> 元素。</p></blockquote><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><ul><li>Spring AOP代理机制<ul><li>JDK动态代理: 针对实现了接口的类</li><li>CGLib动态代理: 针对没有实现接口的类，应用最底层的字节码增强技术生成当前类的子类对象</li></ul></li><li>术语<ul><li>Joinpoint(连接点): 被拦截的点，在spring中，这些点指的是方法，因为spring只支持方法类型的连接点（可以切入的点）</li><li>Pointcut(切入点): 对哪些Joinpoint进行拦截的定义。（已经被切入的点）</li><li>Advice(通知/增强): 拦截到Joinpoint之后所要做的事情就是通知。通知分为前置通知、后置通知、异常通知、最终通知、环绕通知（切面要完成的功能）</li><li>Introduction(引介): 一种特殊的通知，在不修改类代码的前提下，Introduction可以在运行期为类动态地添加一些方法或Field。</li><li>Aspect(切面): Pointcut和Advice|Introduction的结合</li><li>Target(目标对象): 代理的目标对象</li><li>Proxy(代理): 一个类被AOP织入增强后，就产生了一个结果代理类。</li><li>Weaving(织入): 将增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入</li></ul></li><li>aop:config, aop:pointcut, aop:aspect, aop:before|after|after-returning|after-throwing|around</li><li><code>&lt;aop:aspectj-autoproxy/&gt;</code>, @Aspect, @Pointcut, @Before, @After, @AfterReturning, @AfterThrowing, @Around</li><li>pointcut<ul><li><code>public * *(..)</code>: 任何public方法</li><li><code>* set*(..)</code>: 任何set方法</li><li><code>* com.xyz.service.UserService.(..)</code>: com.xyz.service.UserService类的任何方法</li><li><code>* com.xyz.service.*.(..)</code>: com.xyz.service包下任何方法</li><li><code>* com.xyz.service..*.(..)</code>: com.xyz.service包及其子包下任何方法</li></ul></li></ul><h1 id="Data-Access-Integration"><a href="#Data-Access-Integration" class="headerlink" title="Data Access/Integration"></a>Data Access/Integration</h1><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><ul><li><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot; p:dataSource-ref=&quot;dataSource&quot;/&gt;</code></li></ul><h2 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h2><blockquote><h4 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a><a href="https://zh.wikipedia.org/wiki/%E4%BA%8B%E5%8B%99%E9%9A%94%E9%9B%A2" target="_blank" rel="noopener">事务隔离</a></h4><ul><li><p>一个数据库事务通常包含了一个序列的对数据库的读/写操作。它的存在包含有以下两个目的：</p><ol><li>为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。</li><li>当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。</li></ol></li><li><p>并非任意的对数据库的操作序列都是数据库事务。数据库事务拥有以下四个特性，习惯上被称之为<strong>ACID特性</strong>。</p><ul><li><strong>原子性（Atomicity）</strong>：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。</li><li><strong>一致性（Consistency）</strong>：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。<em>一致状态</em>的含义是数据库中的数据应满足完整性约束。</li><li><strong>隔离性（Isolation）</strong>：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。</li><li><strong>持久性（Durability）</strong>：已被提交的事务对数据库的修改应该永久保存在数据库中。</li></ul></li><li><p><strong>事务隔离</strong>（英语：Transaction Isolation）定义了数据库系统中一个操作的结果在何时以何种方式对其他并发操作可见。隔离是事务<em>ACID</em>四大属性之一。</p></li><li><p>ANSI/ISO SQL定义的标准隔离级别如下：</p><ul><li><strong>可串行化（SERIALIZABLE）</strong></li></ul><p>最高的隔离级别。</p><p>在基于锁机制并发控制的DBMS实现可串行化，要求在选定对象上的读锁和写锁保持直到事务结束后才能释放。在SELECT的查询中使用一个“WHERE”子句来描述一个范围时应该获得一个“范围锁”（range-locks）。这种机制可以避免“幻影读”（phantom reads）现象（详见下文）。</p><p>当采用不基于锁的[并发控制]时不用获取锁。但当系统探测到几个并发事务有“写冲突”的时候，只有其中一个是允许提交的。这种机制的详细描述见“快照隔离”</p><ul><li><strong>可重复读（REPEATABLE READS）</strong></li></ul><p>在可重复读隔离级别中，基于锁机制并发控制的DBMS需要对选定对象的读锁（read locks）和写锁（write locks）一直保持到事务结束，但不要求“范围锁”，因此可能会发生“幻影读”。</p><ul><li><strong>提交读（READ COMMITTED）</strong></li></ul><p>在提交读级别中，基于锁机制并发控制的DBMS需要对选定对象的写锁一直保持到事务结束，但是读锁在SELECT操作完成后马上释放（因此“不可重复读”现象可能会发生，见下面描述）。和前一种隔离级别一样，也不要求“范围锁”。</p><ul><li><strong>未提交读（READ UNCOMMITTED）</strong></li></ul><p>未提交读是最低的隔离级别。允许“脏读”（dirty reads），事务可以看到其他事务“尚未提交”的修改。</p><p>通过比低一级的隔离级别要求更多的限制，高一级的级别提供更强的隔离性。标准允许事务运行在更强的事务隔离级别上。(如在可重复读隔离级别上执行提交读的事务是没有问题的)</p></li><li><p><strong><em>读现象</em></strong></p><ul><li><p><strong>脏读</strong></p><p>当一个事务允许读取另外一个事务修改但未提交的数据时，就可能发生脏读。</p><p>脏读和不可重复读（non-repeatable reads）类似。事务2没有提交造成事务1的语句1两次执行得到不同的结果集。在未提交读隔离级别唯一禁止的是更新混乱，即早期的更新可能出现在后来更新之前的结果集中。</p></li><li><p><strong>不可重复读</strong><br>在一次事务中，当一行数据获取两遍得到不同的结果表示发生了“不可重复读”.</p><p>在基于锁的并发控制中“不可重复读”现象发生在当执行SELECT 操作时没有获得读锁或者SELECT操作执行完后马上释放了读锁； 多版本并发控制中当没有要求一个提交冲突的事务回滚也会发生“不可重复读”现象。</p></li><li><p><strong>幻影读</strong><br>在事务执行过程中，当两个完全相同的查询语句执行得到不同的结果集。这种现象称为“幻影读（phantom read）”</p><p>当事务没有获取范围锁的情况下执行SELECT … WHERE操作可能会发生“幻影读”。</p><p>“幻影读”是不可重复读的一种特殊场景：当事务1两次执行SELECT … WHERE检索一定范围内数据的操作中间，事务2在这个表中创建了(如INSERT)了一行新数据，这条新数据正好满足事务1的“WHERE”子句。</p></li></ul></li><li><p><strong><em>隔离级别vs读现象</em></strong></p><p>| 隔离级别 |   脏读   | 不可重复读 |  幻影读  |<br>| :——: | :——: | :——–: | :——: |<br>| 未提交读 | 可能发生 |  可能发生  | 可能发生 |<br>|  提交读  |    -     |  可能发生  | 可能发生 |<br>| 可重复读 |    -     |     -      | 可能发生 |<br>| 可序列化 |    -     |     -      |    -     |</p><p>可序列化（Serializable）隔离级别不等同于可串行化（Serializable）。可串行化调度是避免以上三种现象的必要条件，但不是充分条件。<br>“可能发生”表示这个隔离级别会发生对应的现象，“-”表示不会发生。</p></li><li><p><strong><em>隔离级别vs锁持续时间</em></strong></p><p>在基于锁的并发控制中，隔离级别决定了锁的持有时间。<strong>“C”</strong>-表示锁会持续到事务提交。 <strong>“S”</strong> –表示锁持续到当前语句执行完毕。如果锁在语句执行完毕就释放则另外一个事务就可以在这个事务提交前修改锁定的数据，从而造成混乱。</p><p>| 隔离级别 | 写操作 | 读操作 | 范围操作 (…where…) |<br>| :——: | :—-: | :—-: | :——————–: |<br>| 未提交读 |   S    |   S    |           S            |<br>|  提交读  |   C    |   S    |           S            |<br>| 可重复读 |   C    |   C    |           S            |<br>| 可序列化 |   C    |   C    |           C            |</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionDefinition</span> </span>&#123;、</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的spring事务传播级别</span></span><br><span class="line"><span class="comment">     * 如果上下文中已经存在事务，那么就加入到事务中执行，如果当前上下文中不存在事务，则新建事务执行。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_REQUIRED = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果上下文存在事务，则支持事务加入事务，如果没有事务，则使用非事务的方式执行。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_SUPPORTS = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要求上下文中必须要存在事务，否则就会抛出异常。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_MANDATORY = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每次都会新建一个事务，并且同时将上下文中的事务挂起，执行当前新建事务完成以后，上下文事务恢复再执行。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_REQUIRES_NEW = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不支持事务。上下文中存在事务，则挂起事务，执行当前逻辑，结束后恢复上下文的事务。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_NOT_SUPPORTED = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要求上下文中不能存在事务，一旦有事务，就抛出异常。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_NEVER = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果上下文中存在事务，则嵌套事务执行，如果不存在事务，则新建事务。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_NESTED = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的隔离级别</span></span><br><span class="line"><span class="comment">     * 使用数据库默认的事务隔离级别。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> ISOLATION_DEFAULT = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读未提交</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> ISOLATION_READ_UNCOMMITTED = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读已提交</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> ISOLATION_READ_COMMITTED = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可重复读</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> ISOLATION_REPEATABLE_READ = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 串行化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> ISOLATION_SERIALIZABLE = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认-1，不超时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> TIMEOUT_DEFAULT = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取事务传播行为</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPropagationBehavior</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取事务隔离级别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getIsolationLevel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取事务超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getTimeout</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否只读事务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"transactionInterceptor"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transfer"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"transactionPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.shieh.service..*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"transactionInterceptor"</span> <span class="attr">pointcut-ref</span>=<span class="string">"transactionPointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>&lt;tx:annotation-driven/&gt;</code> 开启事务注解,使用 <code>@Transactional</code> 在业务层声明事务</p></li></ul><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="QuickStart-1"><a href="#QuickStart-1" class="headerlink" title="QuickStart"></a>QuickStart</h2><ul><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:dispatcherServlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- dispatcherServlet.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 编译插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Tomcat插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/spring-mvc<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">warSourceDirectory</span>&gt;</span>$&#123;basedir&#125;/target/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">warSourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Annotation-1"><a href="#Annotation-1" class="headerlink" title="Annotation"></a>Annotation</h2><ul><li><p><code>@RequestMapping</code></p><ul><li><code>@GetMapping</code>,<code>@PostMapping</code>,<code>@PutMapping</code>,<code>@DeleteMapping</code>,<code>@PatchMapping</code></li><li>glob 模式和通配符映射请求,使用<code>@PathVariable</code>获取<ul><li><code>?</code> 匹配一个字符</li><li><code>*</code> 匹配路径段中的零个或多个字符</li><li><code>**</code> 匹配零个或多个路径段</li></ul></li><li><code>consumes</code>: 根据请求缩小请求映射范围<code>Content-Type</code><ul><li>该<code>consumes</code>属性还支持否定表达式 - 例如，<code>!text/plain</code>表示除了以外的任何内容类型<code>text/plain</code>。</li><li><code>MediaType</code>提供常用媒体类型的常量，例如 <code>APPLICATION_JSON_VALUE</code>和<code>APPLICATION_XML_VALUE</code>。</li></ul></li><li><code>produces</code>: 根据<code>Accept</code>请求标头和控制器方法生成的内容类型列表来缩小请求映射<ul><li>媒体类型可以指定字符集。支持否定表达式</li></ul></li><li><code>params</code>: 根据请求参数条件缩小请求映射</li><li><code>headers</code>: 根据请求头条件缩小请求映射</li></ul></li><li><p><code>@PathVariable</code></p><ul><li>使用<code>{varName:regex}</code>进行正则匹配</li></ul></li><li><p><code>@RequestParam</code>，<code>@RequestHeader</code>，<code>@RequestAttribute</code></p><ul><li><code>@RequestParam</code> 用于获取从表单传递的参数</li><li><code>@RequestAttribute</code> 用于获取请求转发时设置的属性</li></ul></li><li><p><code>@SessionAttributes</code>,<code>@SessionAttribute</code>,<code>@CookieValue</code></p></li><li><p>POST乱码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>GET乱码<code>&lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt;</code></p></li></ul><h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><p><a href="https://zh.wikipedia.org/wiki/%E8%A1%A8%E7%8E%B0%E5%B1%82%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener"><strong>表现层状态转换</strong></a>（REST，英文：Representational State Transfer）是Roy Thomas Fielding博士于2000年在他的博士论文中提出来的一种<em>万维网软件架构</em>风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。</p><p>需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML以及HTML这些现有的广泛流行的协议和标准。</p><ul><li>资源是由URI来指定。</li><li>对资源的操作包括获取、创建、修改和删除资源，这些操作正好对应HTTP协议提供的GET、POST、PUT和DELETE方法。</li><li>通过操作资源的表现形式来操作资源。</li><li>资源的表现形式则是XML或者HTML，取决于读者是机器还是人，是消费web服务的客户软件还是web浏览器。当然也可以是任何其他的格式。</li></ul><p>浏览器 form 表单只支持 GET 与 POST 请求，而 DELETE、PUT 等 method 并不支持，spring3.0 添加了一个过滤器，可以将这些请求转换为标准的 http 方法，使得支持 GET、POST、PUT 与 DELETE 请求，该过滤器为<code>HiddenHttpMethodFilter</code>。</p><p><code>HiddenHttpMethodFilter</code> 只对 POST 请求的表单进行过滤，在表单内部添加 <code>name=&quot;_method&quot;</code> 进行类型声明。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"..."</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"DELETE"</span>/&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="排除静态资源"><a href="#排除静态资源" class="headerlink" title="排除静态资源"></a>排除静态资源</h2><ul><li><p>使用<code>&lt;mvc:default-servlet-handler/&gt;</code>指定默认处理器处理静态资源</p><ul><li>单独使用会让所有访问都进行默认处理，导致<code>@RequestMapping</code>注解失效，需要配合<code>&lt;mvc:annotation-driven/&gt;</code>使用</li></ul></li><li><p>使用<code>&lt;mvc:resources/&gt;</code>指定静态资源匹配规则</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">location</span>=<span class="string">"/public, classpath:/static/"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">cache-period</span>=<span class="string">"31556926"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>web.xml</code>进行配置默认servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.gif<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.mp4<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.png<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="url-pattern"><a href="#url-pattern" class="headerlink" title="url-pattern"></a><code>url-pattern</code></h2><ul><li><code>url-pattern</code> 中 <code>/</code> 与 <code>/*</code> 的区别，参考<a href="https://stackoverflow.com/questions/4140448/difference-between-and-in-servlet-mapping-url-pattern" target="_blank" rel="noopener">Difference between / and /* in servlet mapping url pattern</a><ul><li><code>/</code> 表示匹配所有路径，例如 <code>/login</code> ，它覆盖容器的默认Servlet的映射</li><li><code>/*</code> 表示匹配所有的路径及资源，例如 <code>/login</code> ， <code>*.jsp</code></li></ul></li></ul><h2 id="mvc-annotation-driven"><a href="#mvc-annotation-driven" class="headerlink" title="mvc:annotation-driven"></a><code>mvc:annotation-driven</code></h2><ul><li><code>&lt;mvc:annotation-driven/&gt;</code> 是一种简写形式，其声明会自动注册 <code>DefaultAnnotationHandlerMapping</code>和<code>AnnotationMethodHandlerAdapter</code> 两个Bean，是Spring MVC为<code>@Controllers</code>分发请求所必需的<ul><li>同时它还提供了数据绑定支持，<code>@NumberFormatannotation</code>支持，<code>@DateTimeFormat</code>支持，<code>@Valid</code>支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）</li><li>使用其子标签<code>&lt;mvc:path-matching&gt;</code>为Spring MVC提供路径匹配模式，默认情况下<code>/index</code>和<code>/index.xxx</code>都可以到<code>@RequestMapping(&quot;/index&quot;)</code>，使用<code>&lt;mvc:path-matching suffix-pattern=&quot;false&quot;/&gt;</code>强制进行路径匹配</li></ul></li></ul><blockquote><p><code>DefaultAnnotationHandlerMapping</code>和<code>AnnotationMethodHandlerAdapter</code> 在Spring 3.2版本中已声明弃用，在Spring 3.2 及以上版本中建议使用 <code>RequestMappingHandlerMapping</code> 与 <code>RequestMappingHandlerAdapter</code></p></blockquote><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li><p>默认情况下Spring MVC会使用格式化程序将请求数据转换为对象，Spring MVC内部已经实现了 <code>Number</code> 与 <code>Date</code> 类型的转换规则，需要使用时可以在字段上添加 <code>@NumberFormat</code> 和 <code>@DateTimeFormat</code> 注解</p><ul><li><p>同时它也支持自定义格式化程序和转换器，实现 <code>Converter</code> 接口，并在 <code>SpringConfig.xml</code> 中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.example.MyConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"formatters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.example.MyFormatter"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.example.MyAnnotationFormatterFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"formatterRegistrars"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.example.MyFormatterRegistrar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="JSON请求"><a href="#JSON请求" class="headerlink" title="JSON请求"></a>JSON请求</h2><ul><li>使用<code>@RequestBody</code>传递请求参数</li><li>使用<code>@ResponseBody</code>返回处理结果</li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ul><li><p><code>@ExceptionHandler</code></p><ul><li>结合<code>@ControllerAdvice</code>使用</li></ul><blockquote><p>参考<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-exceptionhandler" target="_blank" rel="noopener">@ExceptionHandler方法</a></p></blockquote></li></ul><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>所有<code>HandlerMapping</code>实现都支持处理程序拦截器，这些拦截器在您要将特定功能应用于某些请求时很有用 - 例如，检查主体。拦截器必须<code>HandlerInterceptor</code>从 <code>org.springframework.web.servlet</code>包中实现三种方法，这些方法应该提供足够的灵活性来进行各种预处理和后处理：</p><ul><li><code>preHandle(..)</code>：在执行实际处理程序之前</li><li><code>postHandle(..)</code>：处理程序执行后</li><li><code>afterCompletion(..)</code>：完成请求完成后</li></ul><p>该<code>preHandle(..)</code>方法返回一个布尔值。您可以使用此方法来中断或继续执行链的处理。当此方法返回时<code>true</code>，处理程序执行链继续。当它返回false时，<code>DispatcherServlet</code> 假定拦截器本身已处理请求（并且，例如，呈现适当的视图）并且不继续执行执行链中的其他拦截器和实际处理程序。</p><p>见<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-interceptors" target="_blank" rel="noopener">拦截</a>在MVC配置一节的如何配置拦截器的实例。您也可以通过在各个<code>HandlerMapping</code>实现上使用setter直接注册它们 。</p><p>请注意，<code>postHandle</code>对于在之前和之前 编写和提交响应的方法<code>@ResponseBody</code>和<code>ResponseEntity</code>方法不太有用。这意味着对响应进行任何更改都为时已晚，例如添加额外的标头。对于此类方案，您可以实现并将其声明为<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-controller-advice" target="_blank" rel="noopener">Controller Advice</a> bean或直接对其进行配置 。<code>HandlerAdapter</code> <code>postHandle</code> <code>ResponseBodyAdvice</code> <code>RequestMappingHandlerAdapter</code></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><ul><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringConfig.xml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 必须配置id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认 ISO-8859-1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"10240"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"uploadTempDir"</span> <span class="attr">value</span>=<span class="string">"/upload/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"-1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/fileupload"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/form"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleFormUpload</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name,</span></span><br><span class="line"><span class="function">                               @<span class="title">RequestParam</span><span class="params">(<span class="string">"file"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = file.getBytes();</span><br><span class="line">        <span class="comment">// store the bytes somewhere</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:uploadSuccess"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:uploadFailure"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="排除自动装配"><a href="#排除自动装配" class="headerlink" title="排除自动装配"></a>排除自动装配</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;./assets/spring-overview.png&quot; alt=&quot;Spring Overview&quot;&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Spring-Framework-Documentation-Version-5-1-0-RELE
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端框架</title>
    <link href="https://humshieh.github.io/2018/11/14/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    <id>https://humshieh.github.io/2018/11/14/前端框架/</id>
    <published>2018-11-14T06:36:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="http://funtl.com/2018/06/17/appose/jQuery-Validation/" target="_blank" rel="noopener">jQuery Validation 表单验证插件</a></li><li><a href="http://funtl.com/2018/06/18/appose/jQuery-iCheck/" target="_blank" rel="noopener">jQuery iCheck 复选/单选美化插件</a></li><li><a href="http://funtl.com/2018/06/21/appose/jQuery-Datatables/" target="_blank" rel="noopener">jQuery Datatables 表格插件</a></li><li><a href="http://funtl.com/2018/06/25/appose/jQuery-TreeTable/" target="_blank" rel="noopener">jQuery TreeTable 树表格插件</a></li><li><a href="http://funtl.com/2018/06/25/appose/jQuery-zTree/" target="_blank" rel="noopener">jQuery zTree 树形结构插件</a></li><li><a href="http://funtl.com/2018/06/27/appose/Dropzone-%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6/" target="_blank" rel="noopener">Dropzone 图片上传插件</a></li><li><a href="http://funtl.com/2018/06/28/appose/wangEditor-%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/" target="_blank" rel="noopener">wangEditor 富文本编辑器</a></li></ul><p><strong>SiteMesh</strong>： 是一个Web页面布局、装饰以及与现有Web应用整合的框架。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://funtl.com/2018/06/17/appose/jQuery-Validation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jQuery Validation 表单验证插件&lt;/a&gt;&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>动态代理</title>
    <link href="https://humshieh.github.io/2018/11/14/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>https://humshieh.github.io/2018/11/14/动态代理/</id>
    <published>2018-11-14T06:36:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><hr><p>所谓动态代理，即通过代理类：Proxy的代理，接口和实现类之间可以不直接发生联系，而可以在运行期（Runtime）实现动态关联。</p><p>java动态代理主要是使用 <code>java.lang.reflect</code> 包中的两个类。</p><p><strong>InvocationHandler类</strong></p><ul><li><code>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable</code></li></ul><p>proxy是代理类，method是被代理的方法，args是被代理方法的参数。此方法由代理类实现。</p><p><strong>Proxy类</strong></p><ul><li><code>protected Proxy(InvocationHandler h)</code></li><li><code>public static Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces) throws IllegalArgumentException</code></li><li><code>public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException</code></li></ul><p>动态代理其实是在运行时生成class，所以，必须为其提供一组interface，然后告诉他class已经实现了这些interface，而且在生成Proxy的时候，必须给他提供一个handler，让他来接管实际的工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于动态生成一个代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target; <span class="comment">// 被代理的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于创建代理对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理对象要执行的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy 代理类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 被代理对象的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 被代理对象方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"==&gt; 开始代理 &lt;=="</span>);</span><br><span class="line">        Object invoke = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"==&gt; 结束代理 &lt;=="</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"核心业务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CreateProxy createProxy = <span class="keyword">new</span> CreateProxy(); <span class="comment">// 用来创建代理对象的对象</span></span><br><span class="line">        Runnable person = <span class="keyword">new</span> Person();</span><br><span class="line">        Runnable proxy = (Runnable) createProxy.create(person);</span><br><span class="line">        proxy.run(); <span class="comment">// inovke</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Runnable</span>, <span class="title">Consumer</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"核心业务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"另一个核心业务:"</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CreateProxy createProxy = <span class="keyword">new</span> CreateProxy(); <span class="comment">// 用来创建代理对象的对象</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        Object proxy = createProxy.create(person);</span><br><span class="line">        Runnable runnableProxy = (Runnable) proxy;</span><br><span class="line">        runnableProxy.run(); <span class="comment">// inovke</span></span><br><span class="line">        Consumer consumerProxy = (Consumer) proxy;</span><br><span class="line">        consumerProxy.accept(<span class="string">"核心业务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态代理应用：AOP框架的简单实现"><a href="#动态代理应用：AOP框架的简单实现" class="headerlink" title="动态代理应用：AOP框架的简单实现"></a>动态代理应用：AOP框架的简单实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Consumer</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        list.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beforeAdvice</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterAdvice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAdvice</span> <span class="keyword">implements</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeAdvice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start time:"</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterAdvice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"end time:"</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bean.target=Message</span><br><span class="line">bean.advice=LogAdvice</span><br><span class="line">bean=ProxyFactoryBean</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactoryBean</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">private</span> Advice advice;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        advice.beforeAdvice();</span><br><span class="line">        Object obj = method.invoke(target, args);</span><br><span class="line">        advice.afterAdvice();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Advice <span class="title">getAdvice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> advice;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdvice</span><span class="params">(Advice advice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.advice = advice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanFactory</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            prop.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String className = prop.getProperty(name);</span><br><span class="line">        Object bean = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取ProxyFactoryBean的class对象</span></span><br><span class="line">            Class&lt;?&gt; aClass = Class.forName(className);</span><br><span class="line">            bean = aClass.newInstance(); <span class="comment">// 实例化对象</span></span><br><span class="line">            <span class="comment">// 根据配置文件实例化target和advice对象</span></span><br><span class="line">            Object target = Class.forName(prop.getProperty(name.concat(<span class="string">".target"</span>))).newInstance();</span><br><span class="line">            Object advice = Class.forName(prop.getProperty(name.concat(<span class="string">".advice"</span>))).newInstance();</span><br><span class="line">            <span class="comment">// 通过内省实现对ProxyFactoryBean的属性赋值</span></span><br><span class="line">            BeanInfo beanInfo = Introspector.getBeanInfo(aClass);</span><br><span class="line">            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">            <span class="keyword">for</span> (PropertyDescriptor propertyDescriptor : propertyDescriptors) &#123;</span><br><span class="line">                String propertyName = propertyDescriptor.getName();</span><br><span class="line">                Method writeMethod = propertyDescriptor.getWriteMethod();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"target"</span>.equals(propertyName)) &#123;</span><br><span class="line">                    writeMethod.invoke(bean, target);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"advice"</span>.equals(propertyName)) &#123;</span><br><span class="line">                    writeMethod.invoke(bean, advice);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IntrospectionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 读取配置文件</span></span><br><span class="line">        InputStream in = ClassLoader.getSystemResourceAsStream(<span class="string">"bean.properties"</span>);</span><br><span class="line">        <span class="comment">// 2. 创建bean的工厂对象</span></span><br><span class="line">        BeanFactory beanFactory = <span class="keyword">new</span> BeanFactory(in);</span><br><span class="line">        <span class="comment">// 3. 获取代理对象</span></span><br><span class="line">        ProxyFactoryBean proxyFactoryBean = (ProxyFactoryBean) beanFactory.getBean(<span class="string">"bean"</span>);</span><br><span class="line">        Consumer&lt;String&gt; proxy = (Consumer&lt;String&gt;) proxyFactoryBean.getProxy();</span><br><span class="line">        proxy.accept(<span class="string">"Tom"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;动态代理&quot;&gt;&lt;a href=&quot;#动态代理&quot; class=&quot;headerlink&quot; title=&quot;动态代理&quot;&gt;&lt;/a&gt;动态代理&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;所谓动态代理，即通过代理类：Proxy的代理，接口和实现类之间可以不直接发生联系，而可以在运行期（Runtime）
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dropzone 图片上传插件</title>
    <link href="https://humshieh.github.io/2018/11/13/Dropzone%20%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6/"/>
    <id>https://humshieh.github.io/2018/11/13/Dropzone 图片上传插件/</id>
    <published>2018-11-13T09:18:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dropzone-图片上传插件"><a href="#Dropzone-图片上传插件" class="headerlink" title="Dropzone 图片上传插件"></a>Dropzone 图片上传插件</h1><h2 id="Dropzone-简介"><a href="#Dropzone-简介" class="headerlink" title="Dropzone 简介"></a>Dropzone 简介</h2><p>Dropzone 是一个开源的 JavaScript 库，提供文件的异步上传功能，并支持拖拽上传功能</p><h3 id="页面引用"><a href="#页面引用" class="headerlink" title="页面引用"></a>页面引用</h3><p>CSS 部分，其中 <code>basic.min.css</code> 提供了官网的炫酷上传效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/assets/plugins/dropzone/min/dropzone.min.css&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/assets/plugins/dropzone/min/basic.min.css&quot; /&gt;</span><br></pre></td></tr></table></figure><p>JS 部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;/static/assets/plugins/dropzone/min/dropzone.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="启用-Dropzone"><a href="#启用-Dropzone" class="headerlink" title="启用 Dropzone"></a>启用 Dropzone</h3><p>只需要一个 <code>div</code> 元素，用 JavaScript 代码启用即可</p><p>HTML 结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;dropz&quot; class=&quot;dropzone&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>JavaScript 启用代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var myDropzone = new Dropzone(&quot;#dropz&quot;, &#123;</span><br><span class="line">    url: &quot;/upload&quot;,</span><br><span class="line">    dictDefaultMessage: &apos;拖动文件至此或者点击上传&apos;, // 设置默认的提示语句</span><br><span class="line">    paramName: &quot;dropzFile&quot;, // 传到后台的参数名称</span><br><span class="line">    init: function () &#123;</span><br><span class="line">        this.on(&quot;success&quot;, function (file, data) &#123;</span><br><span class="line">            // 上传成功触发的事件</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中 <code>url</code> 是必须的值，指明文件上传提交到哪个页面。其他的值都是可选的，如果使用默认值的话可以省略。</p><h2 id="配置-Dropzone"><a href="#配置-Dropzone" class="headerlink" title="配置 Dropzone"></a>配置 Dropzone</h2><p>此插件的特色就在于非常灵活，提供了许多可选项、事件等。下面分类介绍常用的配置项。</p><h3 id="功能选项"><a href="#功能选项" class="headerlink" title="功能选项"></a>功能选项</h3><ul><li><code>url</code>：最重要的参数，指明了文件提交到哪个页面</li><li><code>method</code>：默认为 <code>post</code>，如果需要，可以改为 <code>put</code></li><li><code>paramName</code>：相当于 <code>&lt;input&gt;</code> 元素的 <code>name</code> 属性，默认为 <code>file</code></li><li><code>maxFilesize</code>：最大文件大小，单位是 MB</li><li><code>maxFiles</code>：默认为 null，可以指定为一个数值，限制最多文件数量</li><li><code>addRemoveLinks</code>：默认 false。如果设为 true，则会给文件添加一个删除链接</li><li><code>acceptedFiles</code>：指明允许上传的文件类型，格式是逗号分隔的 MIME type 或者扩展名。例如：<code>image/*, application/pdf, .psd, .obj</code></li><li><code>uploadMultiple</code>：指明是否允许 Dropzone 一次提交多个文件。默认为 false。如果设为 true，则相当于 HTML 表单添加 multiple 属性</li><li><code>headers</code>：如果设定，则会作为额外的 header 信息发送到服务器。例如：<code>{&quot;custom-header&quot;: &quot;value&quot;}</code></li><li><code>init</code>：一个函数，在 Dropzone 初始化的时候调用，可以用来添加自己的事件监听器</li><li><code>forceFallback</code>：Fallback 是一种机制，当浏览器不支持此插件时，提供一个备选方案。默认为 false。如果设为 true，则强制 fallback</li><li><code>fallback</code>：一个函数，如果浏览器不支持此插件则调用</li></ul><h3 id="翻译选项"><a href="#翻译选项" class="headerlink" title="翻译选项"></a>翻译选项</h3><ul><li><code>dictDefaultMessage</code>：没有任何文件被添加的时候的提示文本</li><li><code>dictFallbackMessage</code>：Fallback 情况下的提示文本</li><li><code>dictInvalidInputType</code>：文件类型被拒绝时的提示文本</li><li><code>dictFileTooBig</code>：文件大小过大时的提示文本</li><li><code>dictCancelUpload</code>：取消上传链接的文本</li><li><code>dictCancelUploadConfirmation</code>：取消上传确认信息的文本</li><li><code>dictRemoveFile</code>：移除文件链接的文本</li><li><code>dictMaxFilesExceeded</code>：超过最大文件数量的提示文本</li></ul><h3 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h3><p>以下事件接收 <code>FILE</code> 为第一个参数</p><ul><li><p><code>addedfile</code>：添加了一个文件时发生</p></li><li><p><code>removedfile</code>：一个文件被移除时发生。你可以监听这个事件并手动从服务器删除这个文件</p></li><li><p><code>uploadprogress</code>：上传时按一定间隔发生这个事件。第二个参数为一个整数，表示进度，从 0 到 100。第三个参数是一个整数，表示发送到服务器的字节数。当一个上传结束时，Dropzone 保证会把进度设为 100。注意：这个函数可能被以同一个进度调用多次</p></li><li><p><code>success</code>：文件成功上传之后发生，第二个参数为服务器响应</p></li><li><p><code>complete</code>：当文件上传成功或失败之后发生</p></li><li><p><code>canceled</code>：当文件在上传时被取消的时候发生</p></li><li><p><code>maxfilesreached</code>：当文件数量达到最大时发生</p></li><li><p><code>maxfilesexceeded</code>：当文件数量超过限制时发生</p></li></ul><p>以下事件接收一个 <code>FILE LIST</code> 作为第一个参数（仅当 <code>UPLOADMULTIPLE</code> 被设为 <code>TRUE</code> 时才会发生）</p><ul><li><code>successmultiple</code></li><li><code>completemultiple</code></li><li><code>cancelmultiple</code></li></ul><p>特殊事件</p><ul><li><code>totaluploadprogress</code>：第一个参数为总上传进度，第二个参数为总字节数，第三个参数为总上传字节数。</li></ul><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var myDropzone = new Dropzone(&quot;#dropz&quot;, &#123;</span><br><span class="line">    url: &quot;/upload&quot;, // 文件提交地址</span><br><span class="line">    method: &quot;post&quot;,  // 也可用put</span><br><span class="line">    paramName: &quot;file&quot;, // 默认为file</span><br><span class="line">    maxFiles: 1,// 一次性上传的文件数量上限</span><br><span class="line">    maxFilesize: 2, // 文件大小，单位：MB</span><br><span class="line">    acceptedFiles: &quot;.jpg,.gif,.png,.jpeg&quot;, // 上传的类型</span><br><span class="line">    addRemoveLinks: true,</span><br><span class="line">    parallelUploads: 1,// 一次上传的文件数量</span><br><span class="line">    //previewsContainer:&quot;#preview&quot;, // 上传图片的预览窗口</span><br><span class="line">    dictDefaultMessage: &apos;拖动文件至此或者点击上传&apos;,</span><br><span class="line">    dictMaxFilesExceeded: &quot;您最多只能上传1个文件！&quot;,</span><br><span class="line">    dictResponseError: &apos;文件上传失败!&apos;,</span><br><span class="line">    dictInvalidFileType: &quot;文件类型只能是*.jpg,*.gif,*.png,*.jpeg。&quot;,</span><br><span class="line">    dictFallbackMessage: &quot;浏览器不受支持&quot;,</span><br><span class="line">    dictFileTooBig: &quot;文件过大上传文件最大支持.&quot;,</span><br><span class="line">    dictRemoveLinks: &quot;删除&quot;,</span><br><span class="line">    dictCancelUpload: &quot;取消&quot;,</span><br><span class="line">    init: function () &#123;</span><br><span class="line">        this.on(&quot;addedfile&quot;, function (file) &#123;</span><br><span class="line">            // 上传文件时触发的事件</span><br><span class="line">        &#125;);</span><br><span class="line">        this.on(&quot;success&quot;, function (file, data) &#123;</span><br><span class="line">            // 上传成功触发的事件</span><br><span class="line">        &#125;);</span><br><span class="line">        this.on(&quot;error&quot;, function (file, data) &#123;</span><br><span class="line">            // 上传失败触发的事件</span><br><span class="line">        &#125;);</span><br><span class="line">        this.on(&quot;removedfile&quot;, function (file) &#123;</span><br><span class="line">            // 删除文件时触发的方法</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="服务端支持"><a href="#服务端支持" class="headerlink" title="服务端支持"></a>服务端支持</h2><p>前端工作做完后，后台需要提供文件上传支持，我们使用 Spring MVC 来接收上传的文件</p><h3 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h3><p>Spring MVC 上传文件需要 <code>commons-fileupload:commons-fileupload</code> 依赖支持，<code>pom.xml</code> 文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置-spring-mvc-xml"><a href="#配置-spring-mvc-xml" class="headerlink" title="配置 spring-mvc.xml"></a>配置 <code>spring-mvc.xml</code></h3><p>需要 Spring 注入 <code>multipartResolver</code> 实例，<code>spring-mvc.xml</code> 增加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 上传文件拦截，设置最大上传文件大小 10M = 10*1024*1024(B) = 10485760 bytes --&gt;</span><br><span class="line">&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;maxUploadSize&quot; value=&quot;10485760&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="控制器关键代码"><a href="#控制器关键代码" class="headerlink" title="控制器关键代码"></a>控制器关键代码</h3><p>以下为控制器中接收文件的关键代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.funtl.my.shop.web.admin.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传控制器</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: UploadController&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lusifer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/27 0:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"upload"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">upload</span><span class="params">(MultipartFile dropzFile, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取上传的原始文件名</span></span><br><span class="line">        String fileName = dropzFile.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 设置文件上传路径</span></span><br><span class="line">        String filePath = request.getSession().getServletContext().getRealPath(<span class="string">"/static/upload"</span>);</span><br><span class="line">        <span class="comment">// 获取文件后缀</span></span><br><span class="line">        String fileSuffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>), fileName.length());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断并创建上传用的文件夹</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 重新设置文件名为 UUID，以确保唯一</span></span><br><span class="line">        file = <span class="keyword">new</span> File(filePath, UUID.randomUUID() + fileSuffix);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 写入文件</span></span><br><span class="line">            dropzFile.transferTo(file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 JSON 数据，这里只带入了文件名</span></span><br><span class="line">        result.put(<span class="string">"fileName"</span>, file.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Dropzone-图片上传插件&quot;&gt;&lt;a href=&quot;#Dropzone-图片上传插件&quot; class=&quot;headerlink&quot; title=&quot;Dropzone 图片上传插件&quot;&gt;&lt;/a&gt;Dropzone 图片上传插件&lt;/h1&gt;&lt;h2 id=&quot;Dropzone-简介&quot;&gt;
      
    
    </summary>
    
      <category term="组件" scheme="https://humshieh.github.io/categories/%E7%BB%84%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Java线程生命周期</title>
    <link href="https://humshieh.github.io/2018/11/13/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://humshieh.github.io/2018/11/13/线程生命周期/</id>
    <published>2018-11-13T09:18:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java线程生命周期"><a href="#Java线程生命周期" class="headerlink" title="Java线程生命周期"></a>Java线程生命周期</h1><p><a href="https://zh.wikipedia.org/zh-hans/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">线程</a>是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并行多个线程，每条线程并行执行不同的任务。</p><p>在多核或多CPU，或支持Hyper-threading的CPU上使用多线程程序设计的好处是显而易见，即提高了程序的执行吞吐率。在单CPU单核的计算机上，使用多线程技术，也可以把进程中负责I/O处理、人机交互而常被阻塞的部分与密集计算的部分分开来执行，编写专门的workhorse线程执行密集计算，从而提高了程序的执行效率。</p><h2 id="线程的基本状态"><a href="#线程的基本状态" class="headerlink" title="线程的基本状态"></a>线程的基本状态</h2><p>在Thread类中存在着一个内部类Thread.State，它描述着Java中线程的六种状态</p><ul><li>NEW<br>A thread that has not yet started is in this state.</li><li>RUNNABLE<br>A thread executing in the Java virtual machine is in this state.</li><li>BLOCKED<br>A thread that is blocked waiting for a monitor lock is in this state.</li><li>WAITING<br>A thread that is waiting indefinitely for another thread to perform a particular action is in this state.</li><li>TIMED_WAITING<br>A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.</li><li>TERMINATED<br>A thread that has exited is in this state.</li></ul><p>线程在给定时间点只能处于一种状态。这些状态是虚拟机状态，不反映任何操作系统线程状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java线程生命周期&quot;&gt;&lt;a href=&quot;#Java线程生命周期&quot; class=&quot;headerlink&quot; title=&quot;Java线程生命周期&quot;&gt;&lt;/a&gt;Java线程生命周期&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常见的Content-Type</title>
    <link href="https://humshieh.github.io/2018/11/13/%E5%B8%B8%E8%A7%81%E7%9A%84Content-Type/"/>
    <id>https://humshieh.github.io/2018/11/13/常见的Content-Type/</id>
    <published>2018-11-13T02:43:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见的Content-Type属性"><a href="#常见的Content-Type属性" class="headerlink" title="常见的Content-Type属性"></a>常见的Content-Type属性</h1><h2 id="x-www-form-urlencoded"><a href="#x-www-form-urlencoded" class="headerlink" title="x-www-form-urlencoded"></a>x-www-form-urlencoded</h2><p>最常见的 <code>POST</code> 上传数据方式，浏览器原生表单如果不设置 <code>enctype</code> 就会以此种方式提交数据，需要上传的数据会以 <code>key=value</code> 的格式进行编码，随后进行 <code>url</code> 转码。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded;charset=utf-8</span><br><span class="line"></span><br><span class="line">title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</span><br></pre></td></tr></table></figure><p>在使用 <code>Ajax</code> 提交数据是，也是使用这种方式。</p><h2 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h2><p>进行文件上传时，必须将表单 <code>enctype</code> 设为此值。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="text"</span><br><span class="line"></span><br><span class="line"><span class="attribute">title</span></span><br><span class="line"><span class="attribute">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span></span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="file"; filename="chrome.png"</span><br><span class="line"><span class="attribute">Content-Type</span>: image/png</span><br><span class="line"></span><br><span class="line">PNG ... content of chrome.png ...</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure><h2 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h2><p>用于传递 <code>JSON</code> 数据，表名传递的数据是序列化后的 <code>JSON</code> 字符串</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json;charset=utf-8</span><br><span class="line"></span><br><span class="line">&#123;"title":"test","sub":[1,2,3]&#125;</span><br></pre></td></tr></table></figure><h2 id="text-xml"><a href="#text-xml" class="headerlink" title="text/xml"></a>text/xml</h2><p>作为 <code>XML-RPC</code> 传输的协议，用于 <code>XML</code> 远程过程调用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: text/xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line">&lt;methodCall&gt;</span><br><span class="line">    &lt;methodName&gt;examples.getStateName&lt;/methodName&gt;</span><br><span class="line">    &lt;params&gt;</span><br><span class="line">        &lt;param&gt;</span><br><span class="line">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;</span><br><span class="line">        &lt;/param&gt;</span><br><span class="line">    &lt;/params&gt;</span><br><span class="line">&lt;/methodCall&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常见的Content-Type属性&quot;&gt;&lt;a href=&quot;#常见的Content-Type属性&quot; class=&quot;headerlink&quot; title=&quot;常见的Content-Type属性&quot;&gt;&lt;/a&gt;常见的Content-Type属性&lt;/h1&gt;&lt;h2 id=&quot;x-www
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="https://humshieh.github.io/2018/11/09/mybatis/"/>
    <id>https://humshieh.github.io/2018/11/09/mybatis/</id>
    <published>2018-11-09T08:33:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考-MyBatis-3-User-Guide-Simplified-Chinese-pdf"><a href="#参考-MyBatis-3-User-Guide-Simplified-Chinese-pdf" class="headerlink" title="参考[MyBatis-3-User-Guide-Simplified-Chinese.pdf]"></a><a href="https://github.com/abel533/Mapper" target="_blank" rel="noopener">参考</a>[MyBatis-3-User-Guide-Simplified-Chinese.pdf]</h2><h2 id="1-入门"><a href="#1-入门" class="headerlink" title="1. 入门"></a>1. 入门</h2><ul><li>什么是MyBatis</li><li>MyBatis基本配置：config, mapper</li></ul><h2 id="2-列名与参数不一致"><a href="#2-列名与参数不一致" class="headerlink" title="2. 列名与参数不一致"></a>2. 列名与参数不一致</h2><ul><li>SQL方式：别名</li><li>MyBatis方式：ResultMap<ul><li>强制标签顺序</li></ul></li></ul><h2 id="3-和-的区别"><a href="#3-和-的区别" class="headerlink" title="3. #和$的区别"></a>3. #和$的区别</h2><ul><li><code>#</code> 预编译 自动转义 防止SQL注入 eg. name -&gt; ‘name’ 用于赋值 使用参数名取值 eg. #{name}</li><li><code>$</code> 拼接字符串 用于传递表名，ORDER BY，GROUP BY 使用value或属性取值 eg. ${value}</li></ul><h2 id="4-多参传递"><a href="#4-多参传递" class="headerlink" title="4. 多参传递"></a>4. 多参传递</h2><ul><li>索引 eg. #{0}</li><li>注解 eg. @Param(value = “fieldName”)</li><li>Map</li></ul><h2 id="5-获取数据库生成ID"><a href="#5-获取数据库生成ID" class="headerlink" title="5. 获取数据库生成ID"></a>5. 获取数据库生成ID</h2><ul><li>Mapper配置 <code>&lt;insert useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;/&gt;</code></li><li>Config配置 <code>&lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;true&quot;/&gt;</code></li><li>数据库不支持自动生成类型 <code>&lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;AFTER&quot;/&gt;</code></li></ul><h2 id="6-动态SQL"><a href="#6-动态SQL" class="headerlink" title="6. 动态SQL"></a>6. 动态SQL</h2><ul><li><code>&lt;if test=&quot;value != null and value != &#39;&#39;&quot;/&gt;</code></li><li>choose when otherwise</li><li>where set trim</li><li>sql</li></ul><h2 id="7-MyBatis-Generator"><a href="#7-MyBatis-Generator" class="headerlink" title="7. MyBatis Generator"></a>7. <a href="http://www.mybatis.org/generator/" target="_blank" rel="noopener">MyBatis Generator</a></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- generatorConfig.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"testTables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--序列化model--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;plugin type="org.mybatis.generator.plugins.SerializablePlugin"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否去除自动生成的注释 true：是 false：否--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/world"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"toor"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;jdbcConnection driverClass="oracle.jdbc.OracleDriver" --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--connectionURL="jdbc:oracle:thin:@localhost:1521:DB_NAME" --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--userId="scott" --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--password="tiger"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 </span></span><br><span class="line"><span class="comment">NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:生成PO类的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"name.mybatis.pojo"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:mapper映射文件生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"name.mybatis.pojo"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">"name.mybatis.mapper"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定数据库表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"city"</span> <span class="attr">domainObjectName</span>=<span class="string">"City"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"country"</span> <span class="attr">domainObjectName</span>=<span class="string">"Country"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"countrylanguage"</span> <span class="attr">domainObjectName</span>=<span class="string">"CountryLanguage"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;table schema="DB2ADMIN" tableName="ALLTYPES" domainObjectName="Customer"&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="useActualColumnNames" value="true"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;generatedKey column="ID" sqlStatement="DB2" identity="true"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;columnOverride column="DATE_FIELD" property="startDate"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;ignoreColumn column="FRED"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/table&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 有些表的字段需要指定java类型</span></span><br><span class="line"><span class="comment">         &lt;table schema="" tableName=""&gt;</span></span><br><span class="line"><span class="comment">            &lt;columnOverride column="" javaType="" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/table&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>false<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-缓存"><a href="#8-缓存" class="headerlink" title="8. 缓存"></a>8. 缓存</h2><ul><li>默认开启局部session缓存</li><li>映射语句文件中的所有insert，update和delete语句会刷新缓存</li><li>开启二级缓存（表级缓存）在mapper设置<code>&lt;cache/&gt;</code>实体必须实现Serializable</li></ul><h2 id="9-嵌套查询"><a href="#9-嵌套查询" class="headerlink" title="9. 嵌套查询"></a>9. 嵌套查询</h2><ul><li>多级单表查询<ul><li><code>&lt;association select=&quot;&quot;/&gt;</code></li><li><code>&lt;collection select=&quot;&quot;/&gt;</code></li></ul></li><li>关联查询</li></ul><h2 id="10-延迟加载"><a href="#10-延迟加载" class="headerlink" title="10. 延迟加载"></a>10. 延迟加载</h2><ul><li>参考MyBatis配置<code>&lt;settings/&gt;</code></li></ul><h2 id="11-TK-MyBatis插件"><a href="#11-TK-MyBatis插件" class="headerlink" title="11. TK MyBatis插件"></a>11. <a href="https://github.com/abel533/Mapper" target="_blank" rel="noopener">TK MyBatis插件</a></h2><ul><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-generator-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>false<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector-java.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mapper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用 Configuration 方式进行配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mybatisConfig"</span> <span class="attr">class</span>=<span class="string">"tk.mybatis.mapper.session.Configuration"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置通用 Mapper，有三种属性注入方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperProperties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            notEmpty=true</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configuration"</span> <span class="attr">ref</span>=<span class="string">"mybatisConfig"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不需要考虑下面这个，注意这里是 org 的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"tk.mybatis.mapper.configuration"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最小侵入式配置</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">MySqlMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">    <span class="comment">//FIXME 特别注意，该接口不能被扫描到，否则会出错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.shieh.my.shop.commons.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.IntrospectedColumn;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.IntrospectedTable;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.PluginAdapter;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.Method;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.TopLevelClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokPlugin</span> <span class="keyword">extends</span> <span class="title">PluginAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> FullyQualifiedJavaType dataAnnotation = <span class="keyword">new</span> FullyQualifiedJavaType(<span class="string">"lombok.Data"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(List&lt;String&gt; warnings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modelBaseRecordClassGenerated</span><span class="params">(TopLevelClass topLevelClass, IntrospectedTable introspectedTable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addDataAnnotation(topLevelClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modelPrimaryKeyClassGenerated</span><span class="params">(TopLevelClass topLevelClass, IntrospectedTable introspectedTable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addDataAnnotation(topLevelClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modelRecordWithBLOBsClassGenerated</span><span class="params">(TopLevelClass topLevelClass, IntrospectedTable introspectedTable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addDataAnnotation(topLevelClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modelGetterMethodGenerated</span><span class="params">(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modelSetterMethodGenerated</span><span class="params">(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addDataAnnotation</span><span class="params">(TopLevelClass topLevelClass)</span> </span>&#123;</span><br><span class="line">        topLevelClass.addImportedType(<span class="keyword">this</span>.dataAnnotation);</span><br><span class="line">        topLevelClass.addAnnotation(<span class="string">"@Data"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将 <code>org.mybatis.spring.mapper.MapperScannerConfigurer</code> 改为 <code>tk.mybatis.spring.mapper.MapperScannerConfigurer</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考-MyBatis-3-User-Guide-Simplified-Chinese-pdf&quot;&gt;&lt;a href=&quot;#参考-MyBatis-3-User-Guide-Simplified-Chinese-pdf&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Druid 介绍及配置</title>
    <link href="https://humshieh.github.io/2018/11/06/Druid%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>https://humshieh.github.io/2018/11/06/Druid介绍及配置/</id>
    <published>2018-11-06T02:40:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<p>Druid 介绍及配置</p><ol><li><p>Druid是什么？<br> Druid是Java语言中最好的数据库连接池。Druid能够提供强大的监控和扩展功能。</p></li><li><p>在哪里下载druid<br> 正式版本下载：<br> maven中央仓库: <a href="http://central.maven.org/maven2/com/alibaba/druid/" target="_blank" rel="noopener">http://central.maven.org/maven2/com/alibaba/druid/</a> </p></li><li><p>怎么获取Druid的源码<br> Druid是一个开源项目，源码托管在github上，源代码仓库地址是 <a href="https://github.com/alibaba/druid。同时每次Druid发布正式版本和快照的时候，都会把源码打包，你可以从上面的下载地址中找到相关版本的源码" target="_blank" rel="noopener">https://github.com/alibaba/druid。同时每次Druid发布正式版本和快照的时候，都会把源码打包，你可以从上面的下载地址中找到相关版本的源码</a></p></li><li><p>怎么配置maven<br> Druid 0.1.18 之后版本都发布到maven中央仓库中，所以你只需要在项目的pom.xml中加上dependency就可以了。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以选择 Maven仓库查找公共的仓库地址:<a href="http://www.mvnrepository.com/artifact/com.alibaba/druid" target="_blank" rel="noopener">http://www.mvnrepository.com/artifact/com.alibaba/druid</a></p></li><li><p>怎么打开Druid的监控统计功能<br> Druid的监控统计功能是通过filter-chain扩展实现，如果你要打开监控统计功能，配置StatFilter，具体看这里：<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter</a></p></li><li><p>怎样使用Druid的内置监控页面<br> 内置监控页面是一个Servlet，具体配置看这里：<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE</a></p></li><li><p>内置监控中的Web和Spring关联监控怎么配置？<br> Web关联监控配置<br> <a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_%E9%85%8D%E7%BD%AEWebStatFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_%E9%85%8D%E7%BD%AEWebStatFilter</a><br> Spring关联监控配置<br> <a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_Druid%E5%92%8CSpring%E5%85%B3%E8%81%94%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_Druid%E5%92%8CSpring%E5%85%B3%E8%81%94%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE</a></p></li><li><p>怎么配置防御SQL注入攻击<br> Druid提供了WallFilter，它是基于SQL语义分析来实现防御SQL注入攻击的。具体配置看这里：<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter</a></p></li><li><p>Druid有没有参考配置<br> 不同的业务场景需求不同，你可以使用我们的参考配置，但建议你仔细阅读相关文档，了解清楚之后做定制配置。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE</a></p></li><li><p>我想日志记录JDBC执行的SQL，如何配置<br>Druid提供了Log4jFilter、CommonsLogFilter和Slf4jFilter，具体配置看这里<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_LogFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_LogFilter</a></p></li><li><p>我的程序可能产生连接泄漏了，有什么办法？<br>Druid提供了多种监测连接泄漏的手段，具体看这里：<a href="https://github.com/alibaba/druid/wiki/%E8%BF%9E%E6%8E%A5%E6%B3%84%E6%BC%8F%E7%9B%91%E6%B5%8B" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E8%BF%9E%E6%8E%A5%E6%B3%84%E6%BC%8F%E7%9B%91%E6%B5%8B</a></p></li><li><p>在Druid中使用PSCache会有内存占用过大问题么？<br>连接Oracle数据库，打开PSCache，在其他的数据库连接池都会存在内存占用过多的问题，Druid是唯一解决这个问题的连接池。具体看这里：<a href="https://github.com/alibaba/druid/wiki/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8BPreparedStatementCache%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8BPreparedStatementCache%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88</a></p></li><li><p>有没有和其他数据库连接池的对比？<br>各种数据库连接池对比<a href="https://github.com/alibaba/druid/wiki/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%AF%B9%E6%AF%94" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%AF%B9%E6%AF%94</a></p></li><li><p>从其他连接池迁移要注意什么？<br>不同连接池的参数参照对比： <a href="http://code.alibabatech.com/wiki/pages/viewpage.action?pageId=6947005" target="_blank" rel="noopener">http://code.alibabatech.com/wiki/pages/viewpage.action?pageId=6947005</a><br>DBCP迁移 <a href="https://github.com/alibaba/druid/wiki/DBCP%E8%BF%81%E7%A7%BB" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/DBCP%E8%BF%81%E7%A7%BB</a></p></li><li><p>Druid中有没有类似Jboss DataSource中的ExceptionSorter<br>ExceptionSorter是JBoss DataSource中的优秀特性，Druid也有一样功能的ExceptionSorter，但不用手动配置，自动识别生效的。具体看这里：<a href="https://github.com/alibaba/druid/wiki/ExceptionSorter_cn" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/ExceptionSorter_cn</a></p></li><li><p>Druid中的maxIdle为什么是没用的？<br>maxIdle是Druid为了方便DBCP用户迁移而增加的，maxIdle是一个混乱的概念。连接池只应该有maxPoolSize和minPoolSize，druid只保留了maxActive和minIdle，分别相当于maxPoolSize和minPoolSize。</p></li><li><p>我的应用配置的是JNDI数据源，可以用DruidDataSource么？<br>DruidDataSource支持JNDI配置，具体看这里：<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_JNDI_Tomcat" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_JNDI_Tomcat</a><br>具体实现的类是这个：com.alibaba.druid.pool.DruidDataSourceFactory，你可以阅读代码加深理解。</p></li><li><p>我的应用已使用DBCP，是代码中写死的，怎样更换为Druid？<br>可以的，Druid提供了一个中完全平滑迁移DBCP的办法。</p></li></ol><p>1) 从<a href="http://repo1.maven.org/maven2/com/alibaba/druid/druid-wrapper/" target="_blank" rel="noopener">http://repo1.maven.org/maven2/com/alibaba/druid/druid-wrapper/</a> 下载druid-wrapper-xxx.jar<br>2) 加入druid-xxx.jar<br>3) 从你的WEB-INF/lib/中删除dbcp-xxx.jar<br>4) 按需要加上配置，比如JVM启动参数加上-Ddruid.filters=stat，动态配置druid的filters<br>这种用法，使得可以在一些非自己开发的应用中使用Druid，例如在sonar中部署druid，sonar是一个使用jruby开发的web应用，写死了DBCP，只能够通过这种方法来更换。</p><ol start="19"><li><p>我想试用快照版本，怎么获取？<br>直接获取快照版本的地址是：<a href="http://code.alibabatech.com/mvn/snapshots/com/alibaba/druid/" target="_blank" rel="noopener">http://code.alibabatech.com/mvn/snapshots/com/alibaba/druid/</a> ，使用快照版本建议加入我们QQ群 92748305，遇到问题直接反馈给我们。</p></li><li><p>有一些SQL执行很慢，我希望日志记录下来，怎么设置？<br>在StatFilter配置中有慢SQL执行日志记录，看这里<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter</a></p></li><li><p>我希望加密我的数据库密码怎么办？<br>运维和DBA都不希望把密码明文直接写在配置文件中，Druid提供了数据库秘密加密的功能。具体看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></p></li><li><p>如何参与Druid的开发<br>Druid是一个通过github开源的项目，github的特性，使得你很容易参与其中。这里有详细说明<a href="https://github.com/alibaba/druid/wiki/%E5%A6%82%E4%BD%95%E5%8F%82%E4%B8%8E" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E5%A6%82%E4%BD%95%E5%8F%82%E4%B8%8E</a></p></li><li><p>Druid的发布周期是怎样？<br>Druid是一个活跃的项目，长期维护。每个月有一个发布窗口，除非遇到重大bug和非常紧急的需求，否则都是每个月最多发布一次。如果没有足够多的需求，发布窗口就不会被使用。</p></li><li><p>如果DruidDataSource在init的时候失败了，不再使用，是否需要close<br>是的，如果DruidDataSource不再使用，必须调用close来释放资源，释放的资源包括关闭Create和Destory线程。</p></li><li><p>DruidDataSource支持哪些数据库？<br>理论上说，支持所有有jdbc驱动的数据库。实际测试过的有</p></li></ol><p>数据库    支持状态<br>mysql    支持，大规模使用<br>oracle    支持，大规模使用<br>sqlserver    支持<br>postgres    支持<br>db2    支持<br>h2    支持<br>derby    支持<br>sqlite    支持<br>sybase    支持</p><ol start="26"><li><p>Oracle下jdbc executeBatch时，更新行数计算不正确<br>使用jdbc的executeBatch 方法，如果数据库为oracle，则无论是否成功更新到数据，返回值都是-2，而不是真正被sql更新到的记录数，这是Oracle JDBC Driver的问题，Druid不作特殊处理。</p></li><li><p>Druid如何自动根据URL自动识别DriverClass的<br>Druid是根据url前缀来识别DriverClass的，这样使得配置更方便简洁。</p></li></ol><p>前缀    DriverCLass    描述信息<br>jdbc:odps    com.aliyun.odps.jdbc.OdpsDriver<br>jdbc:derby    org.apache.derby.jdbc.EmbeddedDriver<br>jdbc:mysql    com.mysql.jdbc.Driver<br>jdbc:oracle    oracle.jdbc.driver.OracleDriver<br>jdbc:microsoft    com.microsoft.jdbc.sqlserver.SQLServerDriver<br>jdbc:sybase:Tds    com.sybase.jdbc2.jdbc.SybDriver<br>jdbc:jtds    net.sourceforge.jtds.jdbc.Driver<br>jdbc:postgresql    org.postgresql.Driver<br>jdbc:fake    com.alibaba.druid.mock.MockDriver<br>jdbc:mock    com.alibaba.druid.mock.MockDriver<br>jdbc:hsqldb    org.hsqldb.jdbcDriver<br>jdbc:db2    COM.ibm.db2.jdbc.app.DB2Driver    DB2的JDBC Driver十分混乱，这个匹配不一定对<br>jdbc:sqlite    org.sqlite.JDBC<br>jdbc:ingres    com.ingres.jdbc.IngresDriver<br>jdbc:h2    org.h2.Driver<br>jdbc:mckoi    com.mckoi.JDBCDriver<br>jdbc:cloudscape    COM.cloudscape.core.JDBCDriver<br>jdbc:informix-sqli    com.informix.jdbc.IfxDriver<br>jdbc:timesten    com.timesten.jdbc.TimesTenDriver<br>jdbc:as400    com.ibm.as400.access.AS400JDBCDriver<br>jdbc:sapdb    com.sap.dbtech.jdbc.DriverSapDB<br>jdbc:JSQLConnect    com.jnetdirect.jsql.JSQLDriver<br>jdbc:JTurbo    com.newatlanta.jturbo.driver.Driver<br>jdbc:firebirdsql    org.firebirdsql.jdbc.FBDriver<br>jdbc:interbase    interbase.interclient.Driver<br>jdbc:pointbase    com.pointbase.jdbc.jdbcUniversalDriver<br>jdbc:edbc    ca.edbc.jdbc.EdbcDriver<br>jdbc:mimer:multi1    com.mimer.jdbc.Driver     </p><ol start="28"><li><p>如何保存监控记录<br><a href="https://github.com/alibaba/druid/wiki/%E6%80%8E%E4%B9%88%E4%BF%9D%E5%AD%98Druid%E7%9A%84%E7%9B%91%E6%8E%A7%E8%AE%B0%E5%BD%95" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E6%80%8E%E4%B9%88%E4%BF%9D%E5%AD%98Druid%E7%9A%84%E7%9B%91%E6%8E%A7%E8%AE%B0%E5%BD%95</a></p></li><li><p>我想Log输出SQL执行的信息怎么办？<br><a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_LogFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_LogFilter</a></p></li><li><p>如何配置Druid内置的log实现<br><a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AEdruid%E5%86%85%E7%BD%AE%E7%9A%84log%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AEdruid%E5%86%85%E7%BD%AE%E7%9A%84log%E5%AE%9E%E7%8E%B0</a></p></li></ol><p>附：示例项目：<br><a href="https://github.com/windwant/spring-dubbo-service.git" target="_blank" rel="noopener">https://github.com/windwant/spring-dubbo-service.git</a><br><a href="https://github.com/windwant/spring-boot-service.git" target="_blank" rel="noopener">https://github.com/windwant/spring-boot-service.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Druid 介绍及配置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Druid是什么？&lt;br&gt; Druid是Java语言中最好的数据库连接池。Druid能够提供强大的监控和扩展功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在哪里下载druid&lt;br&gt; 正式版本下载：&lt;br&gt; maven中央
      
    
    </summary>
    
      <category term="JDBC" scheme="https://humshieh.github.io/categories/JDBC/"/>
    
    
  </entry>
  
  <entry>
    <title>IDEA错误</title>
    <link href="https://humshieh.github.io/2018/11/06/idea%E9%94%99%E8%AF%AF/"/>
    <id>https://humshieh.github.io/2018/11/06/idea错误/</id>
    <published>2018-11-06T02:38:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Cannot-start-compilation-the-output-path-is-not-specified-for-module-“XXX”-Specify-the-output-path-in-Configure-Project"><a href="#1-Cannot-start-compilation-the-output-path-is-not-specified-for-module-“XXX”-Specify-the-output-path-in-Configure-Project" class="headerlink" title="1. Cannot start compilation: the output path is not specified for module “XXX”. Specify the output path in Configure Project."></a>1. Cannot start compilation: the output path is not specified for module “XXX”. Specify the output path in Configure Project.</h2><p>未定义编译路径，进入 <code>Project Structure(Ctrl + Shift + Alt + S)</code> -&gt; <code>Project Settrings</code> -&gt; <code>Modules</code> -&gt; 左侧选中选中 Module ，点击 Paths 在 Compiler output 中设置 Use module compile output path</p><p><img src="assets/idea_error_1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Cannot-start-compilation-the-output-path-is-not-specified-for-module-“XXX”-Specify-the-output-path-in-Configure-Project&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="IDEA" scheme="https://humshieh.github.io/categories/IDEA/"/>
    
    
  </entry>
  
  <entry>
    <title>整数包装类值比较问题</title>
    <link href="https://humshieh.github.io/2018/10/31/%E6%95%B4%E6%95%B0%E5%8C%85%E8%A3%85%E7%B1%BB%E5%80%BC%E6%AF%94%E8%BE%83%E9%97%AE%E9%A2%98/"/>
    <id>https://humshieh.github.io/2018/10/31/整数包装类值比较问题/</id>
    <published>2018-10-31T10:02:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<p>对于Integer、Short、Byte、Character、Long 这些包装类，都有一个常量池，常量池的范围是-128~127之间。如果定义的包装类的值在这个范围内，则会直接返回内部缓存池中已经存在的对象的引用，而对于浮点型Float和Double这样的包装类，没有常量池机制，不管传入的值是多少，都会new一个新的对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于Integer、Short、Byte、Character、Long 这些包装类，都有一个常量池，常量池的范围是-128~127之间。如果定义的包装类的值在这个范围内，则会直接返回内部缓存池中已经存在的对象的引用，而对于浮点型Float和Double这样的包装类，没有常量
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ifream高度问题</title>
    <link href="https://humshieh.github.io/2018/10/31/ifream%E9%AB%98%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <id>https://humshieh.github.io/2018/10/31/ifream高度问题/</id>
    <published>2018-10-31T07:21:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<p>Add this to your <code>&lt;head&gt;</code> section:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  function resizeIframe(obj) &#123;</span></span><br><span class="line"><span class="undefined">    obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px';</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And change your iframe to this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">onload</span>=<span class="string">"resizeIframe(this)"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>As found on <a href="https://www.sitepoint.com/community/t/auto-height-iframe-content-script/67843" target="_blank" rel="noopener">sitepoint discussion</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Add this to your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
      <category term="前端" scheme="https://humshieh.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>自定义注解</title>
    <link href="https://humshieh.github.io/2018/10/25/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
    <id>https://humshieh.github.io/2018/10/25/自定义注解/</id>
    <published>2018-10-25T09:51:00.000Z</published>
    <updated>2019-09-02T10:40:40.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><h3 id="mate-annotation"><a href="#mate-annotation" class="headerlink" title="mate-annotation"></a>mate-annotation</h3><p>元注解是提供给注解的注解。Java5.0定义了4个标准的 meta-annotation 类型，它们被用来提供对其它 annotation 类型作说明。Java5.0 定义的元注解：</p><ul><li><code>@Target</code></li><li><code>@Retention</code></li><li><code>@Documented</code></li><li><code>@Inherited</code></li></ul><h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h3><p><code>@Target</code> 说明了Annotation所修饰的对象范围： Annotation 可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在 Annotation 类型的声明中使用了 target 可更加明晰其修饰的目标。</p><p>取值定义在 <code>ElementType</code> 枚举中：</p><ul><li><code>ElementType.CONSTRUCTOR</code>: 用于描述构造器</li><li><code>ElementType.FIELD</code>: 用于描述域</li><li><code>ElementType.LOCAL_VARIABLE</code>: 用于描述局部变量</li><li><code>ElementType.METHOD</code>: 用于描述方法</li><li><code>ElementType.PACKAGE</code>: 用于描述包</li><li><code>ElementType.PARAMETER</code>: 用于描述参数</li><li><code>ElementType.TYPE</code>: 用于描述类、接口(包括注解类型) 或 <code>enum</code> 声明</li></ul><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><p><code>@Retention</code> 定义了该 Annotation 被保留的时间长短：某些 Annotation 仅出现在源代码中，而被编译器丢弃；而另一些却被编译在 class 文件中；编译在 class 文件中的 Annotation 可能会被虚拟机忽略，而另一些在 class 被装载时将被读取（请注意并不影响 class 的执行，因为 Annotation 与 class 在使用上是被分离的）。使用这个 meta-Annotation 可以对 Annotation 的“生命周期”限制。</p><p>取值定义在 <code>RetentionPoicy</code> 枚举中：</p><ul><li><code>RetentionPoicy.SOURCE</code>: 在源文件中有效</li><li><code>RetentionPoicy.CLASS</code>: 在class文件中有效</li><li><code>RetentionPoicy.RUNTIME</code>: 在运行时有效</li></ul><h3 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h3><p><code>@Documented</code> 用于描述其它类型的 annotation 应该被作为被标注的程序成员的公共API，因此可以被例如 javadoc 此类的工具文档化。<code>@Documented</code> 是一个标记注解，没有成员。</p><h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3><p><code>@Inherited</code> 元注解是一个标记注解，<code>@Inherited</code>表示了被标注的 annotation 是可以被继承的。如果一个使用了 <code>@Inherited</code> 修饰的 annotation 类型被用于一个 class，则这个 annotation 将被用于该 class 的子类。当使用反射获取该某个类的子类 annotation 时也会获取到父类存在有 <code>@inherited</code> 声明的 annotation 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自定义注解&quot;&gt;&lt;a href=&quot;#自定义注解&quot; class=&quot;headerlink&quot; title=&quot;自定义注解&quot;&gt;&lt;/a&gt;自定义注解&lt;/h2&gt;&lt;h3 id=&quot;mate-annotation&quot;&gt;&lt;a href=&quot;#mate-annotation&quot; class=&quot;he
      
    
    </summary>
    
    
  </entry>
  
</feed>
