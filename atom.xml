<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shepherd&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shepherd-xie.github.io/"/>
  <updated>2021-02-09T03:02:13.817Z</updated>
  <id>https://shepherd-xie.github.io/</id>
  
  <author>
    <name>Shepherd Xie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kms激活</title>
    <link href="https://shepherd-xie.github.io/2021/02/08/kms%E6%BF%80%E6%B4%BB/"/>
    <id>https://shepherd-xie.github.io/2021/02/08/kms激活/</id>
    <published>2021-02-08T06:46:16.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">slmgr /upk</span><br><span class="line">slmgr /ipk GVLK //Windows版本密钥</span><br><span class="line">slmgr /skms kms.server.ip:port //KMS服务器地址 默认端口1688</span><br><span class="line">slmgr /ato</span><br><span class="line">slmgr /dlv</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slmgr /ckms  //清除系统KMS信息</span><br><span class="line">slmgr /rearm //重置计算机的授权状态</span><br></pre></td></tr></table></figure><h3 id="Office-x86"><a href="#Office-x86" class="headerlink" title="Office x86"></a>Office x86</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd \Program Files (x86)\Microsoft Office\Office16</span><br><span class="line">cscript ospp.vbs /sethst:kms.server.ip:port</span><br><span class="line">cscript ospp.vbs /inpkey:xxxxx-xxxxx-xxxxx-xxxxx-xxxxx</span><br><span class="line">cscript ospp.vbs /act</span><br><span class="line">cscript ospp.vbs /dstatusall</span><br></pre></td></tr></table></figure><h3 id="Office-x86-64"><a href="#Office-x86-64" class="headerlink" title="Office x86_64"></a>Office x86_64</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd \Program Files\Microsoft Office\Office16</span><br><span class="line">cscript ospp.vbs /sethst:kms.server.ip:port</span><br><span class="line">cscript ospp.vbs /inpkey:xxxxx-xxxxx-xxxxx-xxxxx-xxxxx</span><br><span class="line">cscript ospp.vbs /act</span><br><span class="line">cscript ospp.vbs /dstatusall</span><br></pre></td></tr></table></figure><h2 id="GVLK-keys"><a href="#GVLK-keys" class="headerlink" title="GVLK keys"></a>GVLK keys</h2><blockquote><p><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/jj612867(v=ws.11" target="_blank" rel="noopener">Appendix A: KMS Client Setup Keys</a>)</p><p>Windows: <a href="https://docs.microsoft.com/en-us/windows-server/get-started/kmsclientkeys" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows-server/get-started/kmsclientkeys</a><br>Office 2013: <a href="https://technet.microsoft.com/en-us/library/dn385360.aspx" target="_blank" rel="noopener">https://technet.microsoft.com/en-us/library/dn385360.aspx</a><br>Office 2016 &amp; 2019: <a href="https://technet.microsoft.com/en-us/library/dn385360(v=office.16).aspx" target="_blank" rel="noopener">https://technet.microsoft.com/en-us/library/dn385360(v=office.16).aspx</a></p></blockquote><h2 id="Windows-Server-2016"><a href="#Windows-Server-2016" class="headerlink" title="Windows Server 2016"></a>Windows Server 2016</h2><table><thead><tr><th style="text-align:left">Operating system edition</th><th style="text-align:left">KMS Client Setup Key</th></tr></thead><tbody><tr><td style="text-align:left">Windows Server 2016 Datacenter</td><td style="text-align:left">CB7KF-BWN84-R7R2Y-793K2-8XDDG</td></tr><tr><td style="text-align:left">Windows Server 2016 Standard</td><td style="text-align:left">WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY</td></tr><tr><td style="text-align:left">Windows Server 2016 Essentials</td><td style="text-align:left">JCKRF-N37P4-C2D82-9YXRT-4M63B</td></tr></tbody></table><h2 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h2><table><thead><tr><th style="text-align:left">Operating system edition</th><th style="text-align:left">KMS Client Setup Key</th></tr></thead><tbody><tr><td style="text-align:left">Windows 10 Professional</td><td style="text-align:left">W269N-WFGWX-YVC9B-4J6C9-T83GX</td></tr><tr><td style="text-align:left">Windows 10 Professional N</td><td style="text-align:left">MH37W-N47XK-V7XM9-C7227-GCQG9</td></tr><tr><td style="text-align:left">Windows 10 Enterprise</td><td style="text-align:left">NPPR9-FWDCX-D2C8J-H872K-2YT43</td></tr><tr><td style="text-align:left">Windows 10 Enterprise N</td><td style="text-align:left">DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4</td></tr><tr><td style="text-align:left">Windows 10 Education</td><td style="text-align:left">NW6C2-QMPVW-D7KKK-3GKT6-VCFB2</td></tr><tr><td style="text-align:left">Windows 10 Education N</td><td style="text-align:left">2WH4N-8QGBV-H22JP-CT43Q-MDWWJ</td></tr><tr><td style="text-align:left">Windows 10 Enterprise 2015 LTSB</td><td style="text-align:left">WNMTR-4C88C-JK8YV-HQ7T2-76DF9</td></tr><tr><td style="text-align:left">Windows 10 Enterprise 2015 LTSB N</td><td style="text-align:left">2F77B-TNFGY-69QQF-B8YKP-D69TJ</td></tr><tr><td style="text-align:left">Windows 10 Enterprise 2016 LTSB</td><td style="text-align:left">DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ</td></tr><tr><td style="text-align:left">Windows 10 Enterprise 2016 LTSB N</td><td style="text-align:left">QFFDN-GRT3P-VKWWX-X7T3R-8B639</td></tr></tbody></table><h2 id="Windows-Server-2012-R2-and-Windows-8-1"><a href="#Windows-Server-2012-R2-and-Windows-8-1" class="headerlink" title="Windows Server 2012 R2 and Windows 8.1"></a>Windows Server 2012 R2 and Windows 8.1</h2><table><thead><tr><th style="text-align:left">Operating system edition</th><th style="text-align:left">KMS Client Setup Key</th></tr></thead><tbody><tr><td style="text-align:left">Windows 8.1 Professional</td><td style="text-align:left">GCRJD-8NW9H-F2CDX-CCM8D-9D6T9</td></tr><tr><td style="text-align:left">Windows 8.1 Professional N</td><td style="text-align:left">HMCNV-VVBFX-7HMBH-CTY9B-B4FXY</td></tr><tr><td style="text-align:left">Windows 8.1 Enterprise</td><td style="text-align:left">MHF9N-XY6XB-WVXMC-BTDCT-MKKG7</td></tr><tr><td style="text-align:left">Windows 8.1 Enterprise N</td><td style="text-align:left">TT4HM-HN7YT-62K67-RGRQJ-JFFXW</td></tr><tr><td style="text-align:left">Windows Server 2012 R2 Server Standard</td><td style="text-align:left">D2N9P-3P6X9-2R39C-7RTCD-MDVJX</td></tr><tr><td style="text-align:left">Windows Server 2012 R2 Datacenter</td><td style="text-align:left">W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9</td></tr><tr><td style="text-align:left">Windows Server 2012 R2 Essentials</td><td style="text-align:left">KNC87-3J2TX-XB4WP-VCPJV-M4FWM</td></tr></tbody></table><h2 id="Windows-Server-2012-and-Windows-8"><a href="#Windows-Server-2012-and-Windows-8" class="headerlink" title="Windows Server 2012 and Windows 8"></a>Windows Server 2012 and Windows 8</h2><table><thead><tr><th style="text-align:left">Operating system edition</th><th style="text-align:left">KMS Client Setup Key</th></tr></thead><tbody><tr><td style="text-align:left">Windows 8 Professional</td><td style="text-align:left">NG4HW-VH26C-733KW-K6F98-J8CK4</td></tr><tr><td style="text-align:left">Windows 8 Professional N</td><td style="text-align:left">XCVCF-2NXM9-723PB-MHCB7-2RYQQ</td></tr><tr><td style="text-align:left">Windows 8 Enterprise</td><td style="text-align:left">32JNW-9KQ84-P47T8-D8GGY-CWCK7</td></tr><tr><td style="text-align:left">Windows 8 Enterprise N</td><td style="text-align:left">JMNMF-RHW7P-DMY6X-RF3DR-X2BQT</td></tr><tr><td style="text-align:left">Windows Server 2012</td><td style="text-align:left">BN3D2-R7TKB-3YPBD-8DRP2-27GG4</td></tr><tr><td style="text-align:left">Windows Server 2012 N</td><td style="text-align:left">8N2M2-HWPGY-7PGT9-HGDD8-GVGGY</td></tr><tr><td style="text-align:left">Windows Server 2012 Single Language</td><td style="text-align:left">2WN2H-YGCQR-KFX6K-CD6TF-84YXQ</td></tr><tr><td style="text-align:left">Windows Server 2012 Country Specific</td><td style="text-align:left">4K36P-JN4VD-GDC6V-KDT89-DYFKP</td></tr><tr><td style="text-align:left">Windows Server 2012 Server Standard</td><td style="text-align:left">XC9B7-NBPP2-83J2H-RHMBY-92BT4</td></tr><tr><td style="text-align:left">Windows Server 2012 MultiPoint Standard</td><td style="text-align:left">HM7DN-YVMH3-46JC3-XYTG7-CYQJJ</td></tr><tr><td style="text-align:left">Windows Server 2012 MultiPoint Premium</td><td style="text-align:left">XNH6W-2V9GX-RGJ4K-Y8X6F-QGJ2G</td></tr><tr><td style="text-align:left">Windows Server 2012 Datacenter</td><td style="text-align:left">48HP8-DN98B-MYWDG-T2DCC-8W83P</td></tr></tbody></table><h2 id="Windows-7-and-Windows-Server-2008-R2"><a href="#Windows-7-and-Windows-Server-2008-R2" class="headerlink" title="Windows 7 and Windows Server 2008 R2"></a>Windows 7 and Windows Server 2008 R2</h2><table><thead><tr><th style="text-align:left">Operating system edition</th><th style="text-align:left">KMS Client Setup Key</th></tr></thead><tbody><tr><td style="text-align:left">Windows 7 Professional</td><td style="text-align:left">FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4</td></tr><tr><td style="text-align:left">Windows 7 Professional N</td><td style="text-align:left">MRPKT-YTG23-K7D7T-X2JMM-QY7MG</td></tr><tr><td style="text-align:left">Windows 7 Professional E</td><td style="text-align:left">W82YF-2Q76Y-63HXB-FGJG9-GF7QX</td></tr><tr><td style="text-align:left">Windows 7 Enterprise</td><td style="text-align:left">33PXH-7Y6KF-2VJC9-XBBR8-HVTHH</td></tr><tr><td style="text-align:left">Windows 7 Enterprise N</td><td style="text-align:left">YDRBP-3D83W-TY26F-D46B2-XCKRJ</td></tr><tr><td style="text-align:left">Windows 7 Enterprise E</td><td style="text-align:left">C29WB-22CC8-VJ326-GHFJW-H9DH4</td></tr><tr><td style="text-align:left">Windows Server 2008 R2 Web</td><td style="text-align:left">6TPJF-RBVHG-WBW2R-86QPH-6RTM4</td></tr><tr><td style="text-align:left">Windows Server 2008 R2 HPC edition</td><td style="text-align:left">TT8MH-CG224-D3D7Q-498W2-9QCTX</td></tr><tr><td style="text-align:left">Windows Server 2008 R2 Standard</td><td style="text-align:left">YC6KT-GKW9T-YTKYR-T4X34-R7VHC</td></tr><tr><td style="text-align:left">Windows Server 2008 R2 Enterprise</td><td style="text-align:left">489J6-VHDMP-X63PK-3K798-CPX3Y</td></tr><tr><td style="text-align:left">Windows Server 2008 R2 Datacenter</td><td style="text-align:left">74YFP-3QFB3-KQT8W-PMXWJ-7M648</td></tr><tr><td style="text-align:left">Windows Server 2008 R2 for Itanium-based Systems</td><td style="text-align:left">GT63C-RJFQ3-4GMB6-BRFB9-CB83V</td></tr></tbody></table><h2 id="Windows-Vista-and-Windows-Server-2008"><a href="#Windows-Vista-and-Windows-Server-2008" class="headerlink" title="Windows Vista and Windows Server 2008"></a>Windows Vista and Windows Server 2008</h2><table><thead><tr><th style="text-align:left">Operating system edition</th><th style="text-align:left">KMS Client Setup Key</th></tr></thead><tbody><tr><td style="text-align:left">Windows Vista Business</td><td style="text-align:left">YFKBB-PQJJV-G996G-VWGXY-2V3X8</td></tr><tr><td style="text-align:left">Windows Vista Business N</td><td style="text-align:left">HMBQG-8H2RH-C77VX-27R82-VMQBT</td></tr><tr><td style="text-align:left">Windows Vista Enterprise</td><td style="text-align:left">VKK3X-68KWM-X2YGT-QR4M6-4BWMV</td></tr><tr><td style="text-align:left">Windows Vista Enterprise N</td><td style="text-align:left">VTC42-BM838-43QHV-84HX6-XJXKV</td></tr><tr><td style="text-align:left">Windows Web Server 2008</td><td style="text-align:left">WYR28-R7TFJ-3X2YQ-YCY4H-M249D</td></tr><tr><td style="text-align:left">Windows Server 2008 Standard</td><td style="text-align:left">TM24T-X9RMF-VWXK6-X8JC9-BFGM2</td></tr><tr><td style="text-align:left">Windows Server 2008 Standard without Hyper-V</td><td style="text-align:left">W7VD6-7JFBR-RX26B-YKQ3Y-6FFFJ</td></tr><tr><td style="text-align:left">Windows Server 2008 Enterprise</td><td style="text-align:left">YQGMW-MPWTJ-34KDK-48M3W-X4Q6V</td></tr><tr><td style="text-align:left">Windows Server 2008 Enterprise without Hyper-V</td><td style="text-align:left">39BXF-X8Q23-P2WWT-38T2F-G3FPG</td></tr><tr><td style="text-align:left">Windows Server 2008 HPC</td><td style="text-align:left">RCTX3-KWVHP-BR6TB-RB6DM-6X7HP</td></tr><tr><td style="text-align:left">Windows Server 2008 Datacenter</td><td style="text-align:left">7M67G-PC374-GR742-YH8V4-TCBY3</td></tr><tr><td style="text-align:left">Windows Server 2008 Datacenter without Hyper-V</td><td style="text-align:left">22XQ2-VRXRG-P8D42-K34TD-G3QQC</td></tr><tr><td style="text-align:left">Windows Server 2008 for Itanium-Based Systems</td><td style="text-align:left">4DWFP-JF3DJ-B7DTH-78FJB-PDRHK</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Windows&quot;&gt;&lt;a href=&quot;#Windows&quot; class=&quot;headerlink&quot; title=&quot;Windows&quot;&gt;&lt;/a&gt;Windows&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux下磁盘常用命令</title>
    <link href="https://shepherd-xie.github.io/2021/01/08/Linux%E4%B8%8B%E7%A3%81%E7%9B%98%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://shepherd-xie.github.io/2021/01/08/Linux下磁盘常用命令/</id>
    <published>2021-01-08T09:57:49.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux下磁盘常用命令"><a href="#Linux下磁盘常用命令" class="headerlink" title="Linux下磁盘常用命令"></a>Linux下磁盘常用命令</h1><p>df 报告文件系统磁盘空间使用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure><p>fdisk</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux下磁盘常用命令&quot;&gt;&lt;a href=&quot;#Linux下磁盘常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux下磁盘常用命令&quot;&gt;&lt;/a&gt;Linux下磁盘常用命令&lt;/h1&gt;&lt;p&gt;df 报告文件系统磁盘空间使用情况&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://shepherd-xie.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ssh免密登录</title>
    <link href="https://shepherd-xie.github.io/2020/03/25/ssh-login-without-password/"/>
    <id>https://shepherd-xie.github.io/2020/03/25/ssh-login-without-password/</id>
    <published>2020-03-25T07:47:12.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>使用 <code>ssh-keygen</code> 生成密钥对</p><p><code>ssh-keygen -o -t rsa -b 4096 -C &quot;email@example.com&quot;</code></p></li><li><p>使用 <code>ssh-copy-id</code> 将公钥发送至目标主机</p><p><code>ssh-copy-id -i ~/.ssh/id_rsa.pub user@host</code></p></li><li><p>使用 <code>ssh</code> 免密登录</p><p><code>ssh user@host</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;ssh-keygen&lt;/code&gt; 生成密钥对&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen -o -t rsa -b 4096 -C &amp;quot;email@example.com&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>oh-my-zsh</title>
    <link href="https://shepherd-xie.github.io/2020/02/27/oh-my-zsh/"/>
    <id>https://shepherd-xie.github.io/2020/02/27/oh-my-zsh/</id>
    <published>2020-02-27T05:24:09.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<p><code>Oh My Zsh</code> 是一个令人愉悦的，开源的，社区驱动的框架，用于管理您的 <code>Zsh</code> 配置。它捆绑了成千上万的有用功能，助手，插件，主题以及一些让您大喊大叫的东西…</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y zsh</span><br><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br></pre></td></tr></table></figure><p>配置文件保存在 <code>~/.zshrc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> If you come from bash you might have to change your $PATH.</span><br><span class="line"><span class="meta">#</span> export PATH=$HOME/bin:/usr/local/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Path to your oh-my-zsh installation.</span><br><span class="line">export ZSH=$HOME/.oh-my-zsh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Set name of the theme to load --- if set to "random", it will</span><br><span class="line"><span class="meta">#</span> load a random theme each time oh-my-zsh is loaded, in which case,</span><br><span class="line"><span class="meta">#</span> to know which specific one was loaded, run: echo $RANDOM_THEME</span><br><span class="line"><span class="meta">#</span> See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span><br><span class="line">ZSH_THEME="robbyrussell"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Set list of themes to pick from when loading at random</span><br><span class="line"><span class="meta">#</span> Setting this variable when ZSH_THEME=random will cause zsh to load</span><br><span class="line"><span class="meta">#</span> a theme from this variable instead of looking in ~/.oh-my-zsh/themes/</span><br><span class="line"><span class="meta">#</span> If set to an empty array, this variable will have no effect.</span><br><span class="line"><span class="meta">#</span> ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following line to use case-sensitive completion.</span><br><span class="line"><span class="meta">#</span> CASE_SENSITIVE="true"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following line to use hyphen-insensitive completion.</span><br><span class="line"><span class="meta">#</span> Case-sensitive completion must be off. _ and - will be interchangeable.</span><br><span class="line"><span class="meta">#</span> HYPHEN_INSENSITIVE="true"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following line to disable bi-weekly auto-update checks.</span><br><span class="line">DISABLE_AUTO_UPDATE="true"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following line to automatically update without prompting.</span><br><span class="line"><span class="meta">#</span> DISABLE_UPDATE_PROMPT="true"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following line to change how often to auto-update (in days).</span><br><span class="line"><span class="meta">#</span> export UPDATE_ZSH_DAYS=13</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following line if pasting URLs and other text is messed up.</span><br><span class="line"><span class="meta">#</span> DISABLE_MAGIC_FUNCTIONS=true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following line to disable colors in ls.</span><br><span class="line"><span class="meta">#</span> DISABLE_LS_COLORS="true"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following line to disable auto-setting terminal title.</span><br><span class="line"><span class="meta">#</span> DISABLE_AUTO_TITLE="true"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following line to enable command auto-correction.</span><br><span class="line"><span class="meta">#</span> ENABLE_CORRECTION="true"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following line to display red dots whilst waiting for completion.</span><br><span class="line"><span class="meta">#</span> COMPLETION_WAITING_DOTS="true"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following line if you want to disable marking untracked files</span><br><span class="line"><span class="meta">#</span> under VCS as dirty. This makes repository status check for large repositories</span><br><span class="line"><span class="meta">#</span> much, much faster.</span><br><span class="line"><span class="meta">#</span> DISABLE_UNTRACKED_FILES_DIRTY="true"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Uncomment the following line if you want to change the command execution time</span><br><span class="line"><span class="meta">#</span> stamp shown in the history command output.</span><br><span class="line"><span class="meta">#</span> You can set one of the optional three formats:</span><br><span class="line"><span class="meta">#</span> "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"</span><br><span class="line"><span class="meta">#</span> or set a custom format using the strftime function format specifications,</span><br><span class="line"><span class="meta">#</span> see 'man strftime' for details.</span><br><span class="line"><span class="meta">#</span> HIST_STAMPS="mm/dd/yyyy"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Would you like to use another custom folder than $ZSH/custom?</span><br><span class="line"><span class="meta">#</span> ZSH_CUSTOM=/path/to/new-custom-folder</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Which plugins would you like to load?</span><br><span class="line"><span class="meta">#</span> Standard plugins can be found in ~/.oh-my-zsh/plugins/*</span><br><span class="line"><span class="meta">#</span> Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span><br><span class="line"><span class="meta">#</span> Example format: plugins=(rails git textmate ruby lighthouse)</span><br><span class="line"><span class="meta">#</span> Add wisely, as too many plugins slow down shell startup.</span><br><span class="line">plugins=(git)</span><br><span class="line"></span><br><span class="line">source $ZSH/oh-my-zsh.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> User configuration</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> export MANPATH="/usr/local/man:$MANPATH"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> You may need to manually set your language environment</span><br><span class="line"><span class="meta">#</span> export LANG=en_US.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Preferred editor for local and remote sessions</span><br><span class="line"><span class="meta">#</span> if [[ -n $SSH_CONNECTION ]]; then</span><br><span class="line"><span class="meta">#</span>   export EDITOR='vim'</span><br><span class="line"><span class="meta">#</span> else</span><br><span class="line"><span class="meta">#</span>   export EDITOR='mvim'</span><br><span class="line"><span class="meta">#</span> fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Compilation flags</span><br><span class="line"><span class="meta">#</span> export ARCHFLAGS="-arch x86_64"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Set personal aliases, overriding those provided by oh-my-zsh libs,</span><br><span class="line"><span class="meta">#</span> plugins, and themes. Aliases can be placed here, though oh-my-zsh</span><br><span class="line"><span class="meta">#</span> users are encouraged to define aliases within the ZSH_CUSTOM folder.</span><br><span class="line"><span class="meta">#</span> For a full list of active aliases, run `alias`.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Example aliases</span><br><span class="line"><span class="meta">#</span> alias zshconfig="mate ~/.zshrc"</span><br><span class="line"><span class="meta">#</span> alias ohmyzsh="mate ~/.oh-my-zsh"</span><br><span class="line">alias cls='clear'</span><br><span class="line">alias l='ls -l'</span><br><span class="line">alias ll='ls -al'</span><br><span class="line">alias vi='vim'</span><br><span class="line">alias javac="javac -J-Dfile.encoding=utf8"</span><br><span class="line">alias grep="grep --color=auto"</span><br><span class="line">alias -s html=mate</span><br><span class="line">alias -s rb=mate</span><br><span class="line">alias -s py=vi</span><br><span class="line">alias -s js=vi</span><br><span class="line">alias -s c=vi</span><br><span class="line">alias -s java=vi</span><br><span class="line">alias -s txt=vi</span><br><span class="line">alias -s gz='tar -xzvf'</span><br><span class="line">alias -s tgz='tar -xzvf'</span><br><span class="line">alias -s zip='unzip'</span><br><span class="line">alias -s bz2='tar -xjvf'</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Oh My Zsh&lt;/code&gt; 是一个令人愉悦的，开源的，社区驱动的框架，用于管理您的 &lt;code&gt;Zsh&lt;/code&gt; 配置。它捆绑了成千上万的有用功能，助手，插件，主题以及一些让您大喊大叫的东西…&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring Cloud Contract 实践</title>
    <link href="https://shepherd-xie.github.io/2019/08/30/Spring-Cloud-Contract-%E5%AE%9E%E8%B7%B5/"/>
    <id>https://shepherd-xie.github.io/2019/08/30/Spring-Cloud-Contract-实践/</id>
    <published>2019-08-30T08:18:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Contract-实践"><a href="#Spring-Cloud-Contract-实践" class="headerlink" title="Spring Cloud Contract 实践"></a>Spring Cloud Contract 实践</h1><p>由于工作需要，第一次接触 Spring Cloud Contract 这个组件。中文翻译为 契约 ，它是一个用于微服务测试组件。在正常的微服务开发过程中，我们要进行测试时，通常情况下要启动全部的微服务项目，这个组件可以使我们在不启动其他微服务时完成测试。</p><a id="more"></a><h2 id="什么是-Spring-Cloud-Contract"><a href="#什么是-Spring-Cloud-Contract" class="headerlink" title="什么是 Spring Cloud Contract"></a>什么是 Spring Cloud Contract</h2><p>在正常的情况下，我们的微服务是由数量众多的调用方服务与被调用方服务组成：</p><p><img src="https://cloud.spring.io/spring-cloud-contract/reference/html/images/Deps.png" alt="一般的微服务架构"></p><p>这种调用方式往往伴随着链式服务调用，如果想要测试左上角的服务，一般来说会有两个方法：</p><ul><li>部署所有的微服务</li><li>在测试中模拟其他的微服务调用</li></ul><p>这两种方式各有其优缺点。</p><p><strong>部署所有的微服务</strong></p><ul><li>优点<ul><li>可以模拟生产环境</li><li>测试服务之间的真实通信</li></ul></li><li>缺点<ul><li>需要启动所有的配套服务、数据库和其他关联项目</li><li>难以调试</li></ul></li></ul><p><strong>在测试中模拟其他的微服务调用</strong></p><ul><li>优点<ul><li>无需依赖于其他的服务</li><li>响应迅速</li></ul></li><li>缺点<ul><li>模拟服务的可靠性不足</li></ul></li></ul><p>为了解决以上的问题，Spring 推出了 Spring Cloud Contract ，主要的思想是提供快速的测试响应而无需配置其他的微服务。在引入 Spring Cloud Contract 后，应用的依赖关系会变为如下图所示：</p><p><img src="https://cloud.spring.io/spring-cloud-contract/reference/html/images/Stubs2.png" alt="使用了 Spring Cloud Contract"></p><p>Spring Cloud Contract 用来保证所使用的的 stubs 是由被调用方创建及维护的。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>Spring Cloud Contract 要求在被调用方声明并实现 契约 ，来由调用方进行使用。</p><h3 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h3><p>引入 Maven 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-contract-verifier<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入 Maven 插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-contract-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-contract.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以 <code>REST</code> 形式编写 stubs 并实现，可以使用 <code>Grovvy</code> 或者 <code>Yaml</code> ，文件默认位于 <code>/src/test/resources/contracts</code> 目录下。</p><p>对于 HTTP stubs 需要指定路径、请求方法、状态码等信息，示例如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> contracts</span><br><span class="line"></span><br><span class="line">org.springframework.cloud.contract.spec.Contract.make &#123;</span><br><span class="line">    request &#123;</span><br><span class="line">        url <span class="string">"/api"</span></span><br><span class="line">        method GET()</span><br><span class="line">        headers &#123;</span><br><span class="line">            header(contentType(), applicationJsonUtf8())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response &#123;</span><br><span class="line">        status OK()</span><br><span class="line">        headers &#123;</span><br><span class="line">            header(contentType(), applicationJsonUtf8())</span><br><span class="line">        &#125;</span><br><span class="line">        body([<span class="string">"apple"</span>, <span class="string">"banana"</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">request:</span></span><br><span class="line"><span class="attr">  method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">  url:</span> <span class="string">/api</span></span><br><span class="line"><span class="attr">  headers:</span></span><br><span class="line"><span class="attr">    Content-Type:</span> <span class="string">application/json;charset=UTF-8</span></span><br><span class="line"><span class="attr">response:</span></span><br><span class="line"><span class="attr">  status:</span> <span class="number">200</span></span><br><span class="line"><span class="attr">  headers:</span></span><br><span class="line"><span class="attr">    Content-Type:</span> <span class="string">application/json;charset=UTF-8</span></span><br><span class="line"><span class="attr">  body:</span> <span class="string">["apple",</span> <span class="string">"banana"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>指定测试基类：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-contract-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">baseClassForTests</span>&gt;</span>com.hello.spring.cloud.contract.provider.HelloSpringCloudContractProviderApplicationTests<span class="tag">&lt;/<span class="name">baseClassForTests</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指定测试接口实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  RestAssuredMockMvc.standaloneSetup(<span class="keyword">new</span> ApiController());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>./mvnw clean install</code> 自动生成测试并进行检验，生成的测试包默认在 <code>target/generated-test-sources</code> 目录下。自动生成的测试类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate_simpleProvider</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// given:</span></span><br><span class="line">    MockMvcRequestSpecification request = given();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// when:</span></span><br><span class="line">        ResponseOptions response = given().spec(request)</span><br><span class="line">          .get(<span class="string">"/api"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// then:</span></span><br><span class="line">        assertThat(response.statusCode()).isEqualTo(<span class="number">200</span>);</span><br><span class="line">        assertThat(response.header(<span class="string">"Content-Type"</span>)).isEqualTo(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">    <span class="comment">// and:</span></span><br><span class="line">        DocumentContext parsedJson = JsonPath.parse(response.getBody().asString());</span><br><span class="line">        assertThatJson(parsedJson).arrayField().contains(<span class="string">"apple"</span>).value();</span><br><span class="line">        assertThatJson(parsedJson).arrayField().contains(<span class="string">"banana"</span>).value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，必须要在测试基类中指定 <code>MockMvc</code> 实例，否则会报如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: </span><br><span class="line">You haven&apos;t configured a MockMVC instance. You can do this statically</span><br><span class="line"></span><br><span class="line">RestAssuredMockMvc.mockMvc(..)</span><br><span class="line">RestAssuredMockMvc.standaloneSetup(..);</span><br><span class="line">RestAssuredMockMvc.webAppContextSetup(..);</span><br><span class="line"></span><br><span class="line">or using the DSL:</span><br><span class="line"></span><br><span class="line">given().</span><br><span class="line">             mockMvc(..). ..</span><br></pre></td></tr></table></figure><p>当服务中包含多个 <code>Controller</code> 实例时，也可以使用如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WebApplicationContext context;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">RestAssuredMockMvc.webAppContextSetup(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>添加 Maven 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-contract-stub-runner<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写测试用例，使用 <code>@AutoConfigureStubRunner</code> 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.NONE)</span><br><span class="line"><span class="meta">@AutoConfigureStubRunner</span>(</span><br><span class="line">        ids = &#123;</span><br><span class="line">                <span class="string">"com.hello:hello-spring-cloud-contract-provider-groovy:+:stubs:8081"</span>,</span><br><span class="line">                <span class="string">"com.hello:hello-spring-cloud-contract-provider-yaml:+:stubs:8082"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        stubsMode = StubRunnerProperties.StubsMode.LOCAL</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringCloudContractConsumerApplicationTests</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>当 stubs 不在本地仓库时，使用如下方式从远程仓库获取 stubs ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.NONE)</span><br><span class="line"><span class="meta">@AutoConfigureStubRunner</span>(</span><br><span class="line">        ids = &#123;</span><br><span class="line">                <span class="string">"com.hello:hello-spring-cloud-contract-provider-groovy:+:stubs:8081"</span>,</span><br><span class="line">                <span class="string">"com.hello:hello-spring-cloud-contract-provider-yaml:+:stubs:8082"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        repositoryRoot = <span class="string">"https://repo.spring.io/libs-snapshot"</span>,</span><br><span class="line">        stubsMode = StubRunnerProperties.StubsMode.REMOTE</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringCloudContractConsumerApplicationTests</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>至此，Spring Cloud Contract 的基本功能已经全部实现。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring Cloud Contract 为我们在微服务测试过程中提供了一个有效的解决方法，可以说是微服务部分 TDD 的最佳实践。</p><hr><blockquote><p>参考文献：</p><ul><li><a href="https://cloud.spring.io/spring-cloud-contract/reference/html/index.html" target="_blank" rel="noopener">Spring Cloud Contract Reference Documentation</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Cloud-Contract-实践&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Contract-实践&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Contract 实践&quot;&gt;&lt;/a&gt;Spring Cloud Contract 实践&lt;/h1&gt;&lt;p&gt;由于工作需要，第一次接触 Spring Cloud Contract 这个组件。中文翻译为 契约 ，它是一个用于微服务测试组件。在正常的微服务开发过程中，我们要进行测试时，通常情况下要启动全部的微服务项目，这个组件可以使我们在不启动其他微服务时完成测试。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="https://shepherd-xie.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="https://shepherd-xie.github.io/tags/Spring-Cloud/"/>
    
      <category term="Test" scheme="https://shepherd-xie.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>前端框架</title>
    <link href="https://shepherd-xie.github.io/2018/11/14/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    <id>https://shepherd-xie.github.io/2018/11/14/前端框架/</id>
    <published>2018-11-14T06:36:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="http://funtl.com/2018/06/17/appose/jQuery-Validation/" target="_blank" rel="noopener">jQuery Validation 表单验证插件</a></li><li><a href="http://funtl.com/2018/06/18/appose/jQuery-iCheck/" target="_blank" rel="noopener">jQuery iCheck 复选/单选美化插件</a></li><li><a href="http://funtl.com/2018/06/21/appose/jQuery-Datatables/" target="_blank" rel="noopener">jQuery Datatables 表格插件</a></li><li><a href="http://funtl.com/2018/06/25/appose/jQuery-TreeTable/" target="_blank" rel="noopener">jQuery TreeTable 树表格插件</a></li><li><a href="http://funtl.com/2018/06/25/appose/jQuery-zTree/" target="_blank" rel="noopener">jQuery zTree 树形结构插件</a></li><li><a href="http://funtl.com/2018/06/27/appose/Dropzone-%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6/" target="_blank" rel="noopener">Dropzone 图片上传插件</a></li><li><a href="http://funtl.com/2018/06/28/appose/wangEditor-%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/" target="_blank" rel="noopener">wangEditor 富文本编辑器</a></li></ul><p><strong>SiteMesh</strong>： 是一个Web页面布局、装饰以及与现有Web应用整合的框架。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://funtl.com/2018/06/17/appose/jQuery-Validation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jQuery Validation 表单验证插件&lt;/a&gt;&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>动态代理</title>
    <link href="https://shepherd-xie.github.io/2018/11/14/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>https://shepherd-xie.github.io/2018/11/14/动态代理/</id>
    <published>2018-11-14T06:36:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><a id="more"></a><hr><p>所谓动态代理，即通过代理类：Proxy的代理，接口和实现类之间可以不直接发生联系，而可以在运行期（Runtime）实现动态关联。</p><p>java动态代理主要是使用 <code>java.lang.reflect</code> 包中的两个类。</p><p><strong>InvocationHandler类</strong></p><ul><li><code>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable</code></li></ul><p>proxy是代理类，method是被代理的方法，args是被代理方法的参数。此方法由代理类实现。</p><p><strong>Proxy类</strong></p><ul><li><code>protected Proxy(InvocationHandler h)</code></li><li><code>public static Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces) throws IllegalArgumentException</code></li><li><code>public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException</code></li></ul><p>动态代理其实是在运行时生成class，所以，必须为其提供一组interface，然后告诉他class已经实现了这些interface，而且在生成Proxy的时候，必须给他提供一个handler，让他来接管实际的工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于动态生成一个代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target; <span class="comment">// 被代理的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于创建代理对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理对象要执行的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy 代理类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 被代理对象的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 被代理对象方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"==&gt; 开始代理 &lt;=="</span>);</span><br><span class="line">        Object invoke = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"==&gt; 结束代理 &lt;=="</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"核心业务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CreateProxy createProxy = <span class="keyword">new</span> CreateProxy(); <span class="comment">// 用来创建代理对象的对象</span></span><br><span class="line">        Runnable person = <span class="keyword">new</span> Person();</span><br><span class="line">        Runnable proxy = (Runnable) createProxy.create(person);</span><br><span class="line">        proxy.run(); <span class="comment">// inovke</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Runnable</span>, <span class="title">Consumer</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"核心业务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"另一个核心业务:"</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CreateProxy createProxy = <span class="keyword">new</span> CreateProxy(); <span class="comment">// 用来创建代理对象的对象</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        Object proxy = createProxy.create(person);</span><br><span class="line">        Runnable runnableProxy = (Runnable) proxy;</span><br><span class="line">        runnableProxy.run(); <span class="comment">// inovke</span></span><br><span class="line">        Consumer consumerProxy = (Consumer) proxy;</span><br><span class="line">        consumerProxy.accept(<span class="string">"核心业务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态代理应用：AOP框架的简单实现"><a href="#动态代理应用：AOP框架的简单实现" class="headerlink" title="动态代理应用：AOP框架的简单实现"></a>动态代理应用：AOP框架的简单实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Consumer</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        list.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beforeAdvice</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterAdvice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAdvice</span> <span class="keyword">implements</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeAdvice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start time:"</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterAdvice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"end time:"</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bean.target=Message</span><br><span class="line">bean.advice=LogAdvice</span><br><span class="line">bean=ProxyFactoryBean</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactoryBean</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">private</span> Advice advice;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        advice.beforeAdvice();</span><br><span class="line">        Object obj = method.invoke(target, args);</span><br><span class="line">        advice.afterAdvice();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Advice <span class="title">getAdvice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> advice;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdvice</span><span class="params">(Advice advice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.advice = advice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanFactory</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            prop.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String className = prop.getProperty(name);</span><br><span class="line">        Object bean = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取ProxyFactoryBean的class对象</span></span><br><span class="line">            Class&lt;?&gt; aClass = Class.forName(className);</span><br><span class="line">            bean = aClass.newInstance(); <span class="comment">// 实例化对象</span></span><br><span class="line">            <span class="comment">// 根据配置文件实例化target和advice对象</span></span><br><span class="line">            Object target = Class.forName(prop.getProperty(name.concat(<span class="string">".target"</span>))).newInstance();</span><br><span class="line">            Object advice = Class.forName(prop.getProperty(name.concat(<span class="string">".advice"</span>))).newInstance();</span><br><span class="line">            <span class="comment">// 通过内省实现对ProxyFactoryBean的属性赋值</span></span><br><span class="line">            BeanInfo beanInfo = Introspector.getBeanInfo(aClass);</span><br><span class="line">            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">            <span class="keyword">for</span> (PropertyDescriptor propertyDescriptor : propertyDescriptors) &#123;</span><br><span class="line">                String propertyName = propertyDescriptor.getName();</span><br><span class="line">                Method writeMethod = propertyDescriptor.getWriteMethod();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"target"</span>.equals(propertyName)) &#123;</span><br><span class="line">                    writeMethod.invoke(bean, target);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"advice"</span>.equals(propertyName)) &#123;</span><br><span class="line">                    writeMethod.invoke(bean, advice);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IntrospectionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 读取配置文件</span></span><br><span class="line">        InputStream in = ClassLoader.getSystemResourceAsStream(<span class="string">"bean.properties"</span>);</span><br><span class="line">        <span class="comment">// 2. 创建bean的工厂对象</span></span><br><span class="line">        BeanFactory beanFactory = <span class="keyword">new</span> BeanFactory(in);</span><br><span class="line">        <span class="comment">// 3. 获取代理对象</span></span><br><span class="line">        ProxyFactoryBean proxyFactoryBean = (ProxyFactoryBean) beanFactory.getBean(<span class="string">"bean"</span>);</span><br><span class="line">        Consumer&lt;String&gt; proxy = (Consumer&lt;String&gt;) proxyFactoryBean.getProxy();</span><br><span class="line">        proxy.accept(<span class="string">"Tom"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动态代理&quot;&gt;&lt;a href=&quot;#动态代理&quot; class=&quot;headerlink&quot; title=&quot;动态代理&quot;&gt;&lt;/a&gt;动态代理&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dropzone 图片上传插件</title>
    <link href="https://shepherd-xie.github.io/2018/11/13/Dropzone%20%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6/"/>
    <id>https://shepherd-xie.github.io/2018/11/13/Dropzone 图片上传插件/</id>
    <published>2018-11-13T09:18:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dropzone-图片上传插件"><a href="#Dropzone-图片上传插件" class="headerlink" title="Dropzone 图片上传插件"></a>Dropzone 图片上传插件</h1><h2 id="Dropzone-简介"><a href="#Dropzone-简介" class="headerlink" title="Dropzone 简介"></a>Dropzone 简介</h2><p>Dropzone 是一个开源的 JavaScript 库，提供文件的异步上传功能，并支持拖拽上传功能</p><a id="more"></a><h3 id="页面引用"><a href="#页面引用" class="headerlink" title="页面引用"></a>页面引用</h3><p>CSS 部分，其中 <code>basic.min.css</code> 提供了官网的炫酷上传效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/assets/plugins/dropzone/min/dropzone.min.css&quot; /&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/assets/plugins/dropzone/min/basic.min.css&quot; /&gt;</span><br></pre></td></tr></table></figure><p>JS 部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;/static/assets/plugins/dropzone/min/dropzone.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="启用-Dropzone"><a href="#启用-Dropzone" class="headerlink" title="启用 Dropzone"></a>启用 Dropzone</h3><p>只需要一个 <code>div</code> 元素，用 JavaScript 代码启用即可</p><p>HTML 结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;dropz&quot; class=&quot;dropzone&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>JavaScript 启用代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var myDropzone = new Dropzone(&quot;#dropz&quot;, &#123;</span><br><span class="line">    url: &quot;/upload&quot;,</span><br><span class="line">    dictDefaultMessage: &apos;拖动文件至此或者点击上传&apos;, // 设置默认的提示语句</span><br><span class="line">    paramName: &quot;dropzFile&quot;, // 传到后台的参数名称</span><br><span class="line">    init: function () &#123;</span><br><span class="line">        this.on(&quot;success&quot;, function (file, data) &#123;</span><br><span class="line">            // 上传成功触发的事件</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中 <code>url</code> 是必须的值，指明文件上传提交到哪个页面。其他的值都是可选的，如果使用默认值的话可以省略。</p><h2 id="配置-Dropzone"><a href="#配置-Dropzone" class="headerlink" title="配置 Dropzone"></a>配置 Dropzone</h2><p>此插件的特色就在于非常灵活，提供了许多可选项、事件等。下面分类介绍常用的配置项。</p><h3 id="功能选项"><a href="#功能选项" class="headerlink" title="功能选项"></a>功能选项</h3><ul><li><code>url</code>：最重要的参数，指明了文件提交到哪个页面</li><li><code>method</code>：默认为 <code>post</code>，如果需要，可以改为 <code>put</code></li><li><code>paramName</code>：相当于 <code>&lt;input&gt;</code> 元素的 <code>name</code> 属性，默认为 <code>file</code></li><li><code>maxFilesize</code>：最大文件大小，单位是 MB</li><li><code>maxFiles</code>：默认为 null，可以指定为一个数值，限制最多文件数量</li><li><code>addRemoveLinks</code>：默认 false。如果设为 true，则会给文件添加一个删除链接</li><li><code>acceptedFiles</code>：指明允许上传的文件类型，格式是逗号分隔的 MIME type 或者扩展名。例如：<code>image/*, application/pdf, .psd, .obj</code></li><li><code>uploadMultiple</code>：指明是否允许 Dropzone 一次提交多个文件。默认为 false。如果设为 true，则相当于 HTML 表单添加 multiple 属性</li><li><code>headers</code>：如果设定，则会作为额外的 header 信息发送到服务器。例如：<code>{&quot;custom-header&quot;: &quot;value&quot;}</code></li><li><code>init</code>：一个函数，在 Dropzone 初始化的时候调用，可以用来添加自己的事件监听器</li><li><code>forceFallback</code>：Fallback 是一种机制，当浏览器不支持此插件时，提供一个备选方案。默认为 false。如果设为 true，则强制 fallback</li><li><code>fallback</code>：一个函数，如果浏览器不支持此插件则调用</li></ul><h3 id="翻译选项"><a href="#翻译选项" class="headerlink" title="翻译选项"></a>翻译选项</h3><ul><li><code>dictDefaultMessage</code>：没有任何文件被添加的时候的提示文本</li><li><code>dictFallbackMessage</code>：Fallback 情况下的提示文本</li><li><code>dictInvalidInputType</code>：文件类型被拒绝时的提示文本</li><li><code>dictFileTooBig</code>：文件大小过大时的提示文本</li><li><code>dictCancelUpload</code>：取消上传链接的文本</li><li><code>dictCancelUploadConfirmation</code>：取消上传确认信息的文本</li><li><code>dictRemoveFile</code>：移除文件链接的文本</li><li><code>dictMaxFilesExceeded</code>：超过最大文件数量的提示文本</li></ul><h3 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h3><p>以下事件接收 <code>FILE</code> 为第一个参数</p><ul><li><p><code>addedfile</code>：添加了一个文件时发生</p></li><li><p><code>removedfile</code>：一个文件被移除时发生。你可以监听这个事件并手动从服务器删除这个文件</p></li><li><p><code>uploadprogress</code>：上传时按一定间隔发生这个事件。第二个参数为一个整数，表示进度，从 0 到 100。第三个参数是一个整数，表示发送到服务器的字节数。当一个上传结束时，Dropzone 保证会把进度设为 100。注意：这个函数可能被以同一个进度调用多次</p></li><li><p><code>success</code>：文件成功上传之后发生，第二个参数为服务器响应</p></li><li><p><code>complete</code>：当文件上传成功或失败之后发生</p></li><li><p><code>canceled</code>：当文件在上传时被取消的时候发生</p></li><li><p><code>maxfilesreached</code>：当文件数量达到最大时发生</p></li><li><p><code>maxfilesexceeded</code>：当文件数量超过限制时发生</p></li></ul><p>以下事件接收一个 <code>FILE LIST</code> 作为第一个参数（仅当 <code>UPLOADMULTIPLE</code> 被设为 <code>TRUE</code> 时才会发生）</p><ul><li><code>successmultiple</code></li><li><code>completemultiple</code></li><li><code>cancelmultiple</code></li></ul><p>特殊事件</p><ul><li><code>totaluploadprogress</code>：第一个参数为总上传进度，第二个参数为总字节数，第三个参数为总上传字节数。</li></ul><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var myDropzone = new Dropzone(&quot;#dropz&quot;, &#123;</span><br><span class="line">    url: &quot;/upload&quot;, // 文件提交地址</span><br><span class="line">    method: &quot;post&quot;,  // 也可用put</span><br><span class="line">    paramName: &quot;file&quot;, // 默认为file</span><br><span class="line">    maxFiles: 1,// 一次性上传的文件数量上限</span><br><span class="line">    maxFilesize: 2, // 文件大小，单位：MB</span><br><span class="line">    acceptedFiles: &quot;.jpg,.gif,.png,.jpeg&quot;, // 上传的类型</span><br><span class="line">    addRemoveLinks: true,</span><br><span class="line">    parallelUploads: 1,// 一次上传的文件数量</span><br><span class="line">    //previewsContainer:&quot;#preview&quot;, // 上传图片的预览窗口</span><br><span class="line">    dictDefaultMessage: &apos;拖动文件至此或者点击上传&apos;,</span><br><span class="line">    dictMaxFilesExceeded: &quot;您最多只能上传1个文件！&quot;,</span><br><span class="line">    dictResponseError: &apos;文件上传失败!&apos;,</span><br><span class="line">    dictInvalidFileType: &quot;文件类型只能是*.jpg,*.gif,*.png,*.jpeg。&quot;,</span><br><span class="line">    dictFallbackMessage: &quot;浏览器不受支持&quot;,</span><br><span class="line">    dictFileTooBig: &quot;文件过大上传文件最大支持.&quot;,</span><br><span class="line">    dictRemoveLinks: &quot;删除&quot;,</span><br><span class="line">    dictCancelUpload: &quot;取消&quot;,</span><br><span class="line">    init: function () &#123;</span><br><span class="line">        this.on(&quot;addedfile&quot;, function (file) &#123;</span><br><span class="line">            // 上传文件时触发的事件</span><br><span class="line">        &#125;);</span><br><span class="line">        this.on(&quot;success&quot;, function (file, data) &#123;</span><br><span class="line">            // 上传成功触发的事件</span><br><span class="line">        &#125;);</span><br><span class="line">        this.on(&quot;error&quot;, function (file, data) &#123;</span><br><span class="line">            // 上传失败触发的事件</span><br><span class="line">        &#125;);</span><br><span class="line">        this.on(&quot;removedfile&quot;, function (file) &#123;</span><br><span class="line">            // 删除文件时触发的方法</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="服务端支持"><a href="#服务端支持" class="headerlink" title="服务端支持"></a>服务端支持</h2><p>前端工作做完后，后台需要提供文件上传支持，我们使用 Spring MVC 来接收上传的文件</p><h3 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h3><p>Spring MVC 上传文件需要 <code>commons-fileupload:commons-fileupload</code> 依赖支持，<code>pom.xml</code> 文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置-spring-mvc-xml"><a href="#配置-spring-mvc-xml" class="headerlink" title="配置 spring-mvc.xml"></a>配置 <code>spring-mvc.xml</code></h3><p>需要 Spring 注入 <code>multipartResolver</code> 实例，<code>spring-mvc.xml</code> 增加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 上传文件拦截，设置最大上传文件大小 10M = 10*1024*1024(B) = 10485760 bytes --&gt;</span><br><span class="line">&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;maxUploadSize&quot; value=&quot;10485760&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="控制器关键代码"><a href="#控制器关键代码" class="headerlink" title="控制器关键代码"></a>控制器关键代码</h3><p>以下为控制器中接收文件的关键代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.funtl.my.shop.web.admin.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传控制器</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: UploadController&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lusifer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/27 0:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"upload"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">upload</span><span class="params">(MultipartFile dropzFile, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取上传的原始文件名</span></span><br><span class="line">        String fileName = dropzFile.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 设置文件上传路径</span></span><br><span class="line">        String filePath = request.getSession().getServletContext().getRealPath(<span class="string">"/static/upload"</span>);</span><br><span class="line">        <span class="comment">// 获取文件后缀</span></span><br><span class="line">        String fileSuffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>), fileName.length());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断并创建上传用的文件夹</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 重新设置文件名为 UUID，以确保唯一</span></span><br><span class="line">        file = <span class="keyword">new</span> File(filePath, UUID.randomUUID() + fileSuffix);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 写入文件</span></span><br><span class="line">            dropzFile.transferTo(file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 JSON 数据，这里只带入了文件名</span></span><br><span class="line">        result.put(<span class="string">"fileName"</span>, file.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dropzone-图片上传插件&quot;&gt;&lt;a href=&quot;#Dropzone-图片上传插件&quot; class=&quot;headerlink&quot; title=&quot;Dropzone 图片上传插件&quot;&gt;&lt;/a&gt;Dropzone 图片上传插件&lt;/h1&gt;&lt;h2 id=&quot;Dropzone-简介&quot;&gt;&lt;a href=&quot;#Dropzone-简介&quot; class=&quot;headerlink&quot; title=&quot;Dropzone 简介&quot;&gt;&lt;/a&gt;Dropzone 简介&lt;/h2&gt;&lt;p&gt;Dropzone 是一个开源的 JavaScript 库，提供文件的异步上传功能，并支持拖拽上传功能&lt;/p&gt;
    
    </summary>
    
      <category term="组件" scheme="https://shepherd-xie.github.io/categories/%E7%BB%84%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Java线程生命周期</title>
    <link href="https://shepherd-xie.github.io/2018/11/13/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://shepherd-xie.github.io/2018/11/13/线程生命周期/</id>
    <published>2018-11-13T09:18:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java线程生命周期"><a href="#Java线程生命周期" class="headerlink" title="Java线程生命周期"></a>Java线程生命周期</h1><a id="more"></a><p><a href="https://zh.wikipedia.org/zh-hans/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">线程</a>是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并行多个线程，每条线程并行执行不同的任务。</p><p>在多核或多CPU，或支持Hyper-threading的CPU上使用多线程程序设计的好处是显而易见，即提高了程序的执行吞吐率。在单CPU单核的计算机上，使用多线程技术，也可以把进程中负责I/O处理、人机交互而常被阻塞的部分与密集计算的部分分开来执行，编写专门的workhorse线程执行密集计算，从而提高了程序的执行效率。</p><h2 id="线程的基本状态"><a href="#线程的基本状态" class="headerlink" title="线程的基本状态"></a>线程的基本状态</h2><p>在Thread类中存在着一个内部类Thread.State，它描述着Java中线程的六种状态</p><ul><li>NEW<br>A thread that has not yet started is in this state.</li><li>RUNNABLE<br>A thread executing in the Java virtual machine is in this state.</li><li>BLOCKED<br>A thread that is blocked waiting for a monitor lock is in this state.</li><li>WAITING<br>A thread that is waiting indefinitely for another thread to perform a particular action is in this state.</li><li>TIMED_WAITING<br>A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.</li><li>TERMINATED<br>A thread that has exited is in this state.</li></ul><p>线程在给定时间点只能处于一种状态。这些状态是虚拟机状态，不反映任何操作系统线程状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java线程生命周期&quot;&gt;&lt;a href=&quot;#Java线程生命周期&quot; class=&quot;headerlink&quot; title=&quot;Java线程生命周期&quot;&gt;&lt;/a&gt;Java线程生命周期&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常见的Content-Type</title>
    <link href="https://shepherd-xie.github.io/2018/11/13/%E5%B8%B8%E8%A7%81%E7%9A%84Content-Type/"/>
    <id>https://shepherd-xie.github.io/2018/11/13/常见的Content-Type/</id>
    <published>2018-11-13T02:43:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见的Content-Type属性"><a href="#常见的Content-Type属性" class="headerlink" title="常见的Content-Type属性"></a>常见的Content-Type属性</h1><a id="more"></a><h2 id="x-www-form-urlencoded"><a href="#x-www-form-urlencoded" class="headerlink" title="x-www-form-urlencoded"></a>x-www-form-urlencoded</h2><p>最常见的 <code>POST</code> 上传数据方式，浏览器原生表单如果不设置 <code>enctype</code> 就会以此种方式提交数据，需要上传的数据会以 <code>key=value</code> 的格式进行编码，随后进行 <code>url</code> 转码。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded;charset=utf-8</span><br><span class="line"></span><br><span class="line">title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</span><br></pre></td></tr></table></figure><p>在使用 <code>Ajax</code> 提交数据是，也是使用这种方式。</p><h2 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h2><p>进行文件上传时，必须将表单 <code>enctype</code> 设为此值。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="text"</span><br><span class="line"></span><br><span class="line"><span class="attribute">title</span></span><br><span class="line"><span class="attribute">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span></span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="file"; filename="chrome.png"</span><br><span class="line"><span class="attribute">Content-Type</span>: image/png</span><br><span class="line"></span><br><span class="line">PNG ... content of chrome.png ...</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure><h2 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h2><p>用于传递 <code>JSON</code> 数据，表名传递的数据是序列化后的 <code>JSON</code> 字符串</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json;charset=utf-8</span><br><span class="line"></span><br><span class="line">&#123;"title":"test","sub":[1,2,3]&#125;</span><br></pre></td></tr></table></figure><h2 id="text-xml"><a href="#text-xml" class="headerlink" title="text/xml"></a>text/xml</h2><p>作为 <code>XML-RPC</code> 传输的协议，用于 <code>XML</code> 远程过程调用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: text/xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line">&lt;methodCall&gt;</span><br><span class="line">    &lt;methodName&gt;examples.getStateName&lt;/methodName&gt;</span><br><span class="line">    &lt;params&gt;</span><br><span class="line">        &lt;param&gt;</span><br><span class="line">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;</span><br><span class="line">        &lt;/param&gt;</span><br><span class="line">    &lt;/params&gt;</span><br><span class="line">&lt;/methodCall&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常见的Content-Type属性&quot;&gt;&lt;a href=&quot;#常见的Content-Type属性&quot; class=&quot;headerlink&quot; title=&quot;常见的Content-Type属性&quot;&gt;&lt;/a&gt;常见的Content-Type属性&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="https://shepherd-xie.github.io/2018/11/09/mybatis/"/>
    <id>https://shepherd-xie.github.io/2018/11/09/mybatis/</id>
    <published>2018-11-09T08:33:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考-MyBatis-3-User-Guide-Simplified-Chinese-pdf"><a href="#参考-MyBatis-3-User-Guide-Simplified-Chinese-pdf" class="headerlink" title="参考[MyBatis-3-User-Guide-Simplified-Chinese.pdf]"></a><a href="https://github.com/abel533/Mapper" target="_blank" rel="noopener">参考</a>[MyBatis-3-User-Guide-Simplified-Chinese.pdf]</h2><a id="more"></a><h2 id="1-入门"><a href="#1-入门" class="headerlink" title="1. 入门"></a>1. 入门</h2><ul><li>什么是MyBatis</li><li>MyBatis基本配置：config, mapper</li></ul><h2 id="2-列名与参数不一致"><a href="#2-列名与参数不一致" class="headerlink" title="2. 列名与参数不一致"></a>2. 列名与参数不一致</h2><ul><li>SQL方式：别名</li><li>MyBatis方式：ResultMap<ul><li>强制标签顺序</li></ul></li></ul><h2 id="3-和-的区别"><a href="#3-和-的区别" class="headerlink" title="3. #和$的区别"></a>3. #和$的区别</h2><ul><li><code>#</code> 预编译 自动转义 防止SQL注入 eg. name -&gt; ‘name’ 用于赋值 使用参数名取值 eg. #{name}</li><li><code>$</code> 拼接字符串 用于传递表名，ORDER BY，GROUP BY 使用value或属性取值 eg. ${value}</li></ul><h2 id="4-多参传递"><a href="#4-多参传递" class="headerlink" title="4. 多参传递"></a>4. 多参传递</h2><ul><li>索引 eg. #{0}</li><li>注解 eg. @Param(value = “fieldName”)</li><li>Map</li></ul><h2 id="5-获取数据库生成ID"><a href="#5-获取数据库生成ID" class="headerlink" title="5. 获取数据库生成ID"></a>5. 获取数据库生成ID</h2><ul><li>Mapper配置 <code>&lt;insert useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;/&gt;</code></li><li>Config配置 <code>&lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;true&quot;/&gt;</code></li><li>数据库不支持自动生成类型 <code>&lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;AFTER&quot;/&gt;</code></li></ul><h2 id="6-动态SQL"><a href="#6-动态SQL" class="headerlink" title="6. 动态SQL"></a>6. 动态SQL</h2><ul><li><code>&lt;if test=&quot;value != null and value != &#39;&#39;&quot;/&gt;</code></li><li>choose when otherwise</li><li>where set trim</li><li>sql</li></ul><h2 id="7-MyBatis-Generator"><a href="#7-MyBatis-Generator" class="headerlink" title="7. MyBatis Generator"></a>7. <a href="http://www.mybatis.org/generator/" target="_blank" rel="noopener">MyBatis Generator</a></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- generatorConfig.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"testTables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--序列化model--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;plugin type="org.mybatis.generator.plugins.SerializablePlugin"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否去除自动生成的注释 true：是 false：否--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/world"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"toor"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;jdbcConnection driverClass="oracle.jdbc.OracleDriver" --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--connectionURL="jdbc:oracle:thin:@localhost:1521:DB_NAME" --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--userId="scott" --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--password="tiger"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 </span></span><br><span class="line"><span class="comment">NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:生成PO类的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"name.mybatis.pojo"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:mapper映射文件生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"name.mybatis.pojo"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">"name.mybatis.mapper"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定数据库表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"city"</span> <span class="attr">domainObjectName</span>=<span class="string">"City"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"country"</span> <span class="attr">domainObjectName</span>=<span class="string">"Country"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"countrylanguage"</span> <span class="attr">domainObjectName</span>=<span class="string">"CountryLanguage"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;table schema="DB2ADMIN" tableName="ALLTYPES" domainObjectName="Customer"&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="useActualColumnNames" value="true"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;generatedKey column="ID" sqlStatement="DB2" identity="true"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;columnOverride column="DATE_FIELD" property="startDate"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;ignoreColumn column="FRED"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/table&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 有些表的字段需要指定java类型</span></span><br><span class="line"><span class="comment">         &lt;table schema="" tableName=""&gt;</span></span><br><span class="line"><span class="comment">            &lt;columnOverride column="" javaType="" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/table&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>false<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-缓存"><a href="#8-缓存" class="headerlink" title="8. 缓存"></a>8. 缓存</h2><ul><li>默认开启局部session缓存</li><li>映射语句文件中的所有insert，update和delete语句会刷新缓存</li><li>开启二级缓存（表级缓存）在mapper设置<code>&lt;cache/&gt;</code>实体必须实现Serializable</li></ul><h2 id="9-嵌套查询"><a href="#9-嵌套查询" class="headerlink" title="9. 嵌套查询"></a>9. 嵌套查询</h2><ul><li>多级单表查询<ul><li><code>&lt;association select=&quot;&quot;/&gt;</code></li><li><code>&lt;collection select=&quot;&quot;/&gt;</code></li></ul></li><li>关联查询</li></ul><h2 id="10-延迟加载"><a href="#10-延迟加载" class="headerlink" title="10. 延迟加载"></a>10. 延迟加载</h2><ul><li>参考MyBatis配置<code>&lt;settings/&gt;</code></li></ul><h2 id="11-TK-MyBatis插件"><a href="#11-TK-MyBatis插件" class="headerlink" title="11. TK MyBatis插件"></a>11. <a href="https://github.com/abel533/Mapper" target="_blank" rel="noopener">TK MyBatis插件</a></h2><ul><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-generator-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>false<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector-java.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mapper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用 Configuration 方式进行配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mybatisConfig"</span> <span class="attr">class</span>=<span class="string">"tk.mybatis.mapper.session.Configuration"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置通用 Mapper，有三种属性注入方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperProperties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            notEmpty=true</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configuration"</span> <span class="attr">ref</span>=<span class="string">"mybatisConfig"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不需要考虑下面这个，注意这里是 org 的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"tk.mybatis.mapper.configuration"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最小侵入式配置</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">MySqlMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">    <span class="comment">//FIXME 特别注意，该接口不能被扫描到，否则会出错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.shieh.my.shop.commons.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.IntrospectedColumn;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.IntrospectedTable;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.PluginAdapter;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.Method;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.dom.java.TopLevelClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LombokPlugin</span> <span class="keyword">extends</span> <span class="title">PluginAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> FullyQualifiedJavaType dataAnnotation = <span class="keyword">new</span> FullyQualifiedJavaType(<span class="string">"lombok.Data"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(List&lt;String&gt; warnings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modelBaseRecordClassGenerated</span><span class="params">(TopLevelClass topLevelClass, IntrospectedTable introspectedTable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addDataAnnotation(topLevelClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modelPrimaryKeyClassGenerated</span><span class="params">(TopLevelClass topLevelClass, IntrospectedTable introspectedTable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addDataAnnotation(topLevelClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modelRecordWithBLOBsClassGenerated</span><span class="params">(TopLevelClass topLevelClass, IntrospectedTable introspectedTable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addDataAnnotation(topLevelClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modelGetterMethodGenerated</span><span class="params">(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">modelSetterMethodGenerated</span><span class="params">(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addDataAnnotation</span><span class="params">(TopLevelClass topLevelClass)</span> </span>&#123;</span><br><span class="line">        topLevelClass.addImportedType(<span class="keyword">this</span>.dataAnnotation);</span><br><span class="line">        topLevelClass.addAnnotation(<span class="string">"@Data"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将 <code>org.mybatis.spring.mapper.MapperScannerConfigurer</code> 改为 <code>tk.mybatis.spring.mapper.MapperScannerConfigurer</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考-MyBatis-3-User-Guide-Simplified-Chinese-pdf&quot;&gt;&lt;a href=&quot;#参考-MyBatis-3-User-Guide-Simplified-Chinese-pdf&quot; class=&quot;headerlink&quot; title=&quot;参考[MyBatis-3-User-Guide-Simplified-Chinese.pdf]&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/abel533/Mapper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考&lt;/a&gt;[MyBatis-3-User-Guide-Simplified-Chinese.pdf]&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Druid 介绍及配置</title>
    <link href="https://shepherd-xie.github.io/2018/11/06/Druid%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>https://shepherd-xie.github.io/2018/11/06/Druid介绍及配置/</id>
    <published>2018-11-06T02:40:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>Druid 介绍及配置</p><a id="more"></a><ol><li><p>Druid是什么？<br> Druid是Java语言中最好的数据库连接池。Druid能够提供强大的监控和扩展功能。</p></li><li><p>在哪里下载druid<br> 正式版本下载：<br> maven中央仓库: <a href="http://central.maven.org/maven2/com/alibaba/druid/" target="_blank" rel="noopener">http://central.maven.org/maven2/com/alibaba/druid/</a> </p></li><li><p>怎么获取Druid的源码<br> Druid是一个开源项目，源码托管在github上，源代码仓库地址是 <a href="https://github.com/alibaba/druid。同时每次Druid发布正式版本和快照的时候，都会把源码打包，你可以从上面的下载地址中找到相关版本的源码" target="_blank" rel="noopener">https://github.com/alibaba/druid。同时每次Druid发布正式版本和快照的时候，都会把源码打包，你可以从上面的下载地址中找到相关版本的源码</a></p></li><li><p>怎么配置maven<br> Druid 0.1.18 之后版本都发布到maven中央仓库中，所以你只需要在项目的pom.xml中加上dependency就可以了。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以选择 Maven仓库查找公共的仓库地址:<a href="http://www.mvnrepository.com/artifact/com.alibaba/druid" target="_blank" rel="noopener">http://www.mvnrepository.com/artifact/com.alibaba/druid</a></p></li><li><p>怎么打开Druid的监控统计功能<br> Druid的监控统计功能是通过filter-chain扩展实现，如果你要打开监控统计功能，配置StatFilter，具体看这里：<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter</a></p></li><li><p>怎样使用Druid的内置监控页面<br> 内置监控页面是一个Servlet，具体配置看这里：<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE</a></p></li><li><p>内置监控中的Web和Spring关联监控怎么配置？<br> Web关联监控配置<br> <a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_%E9%85%8D%E7%BD%AEWebStatFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_%E9%85%8D%E7%BD%AEWebStatFilter</a><br> Spring关联监控配置<br> <a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_Druid%E5%92%8CSpring%E5%85%B3%E8%81%94%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_Druid%E5%92%8CSpring%E5%85%B3%E8%81%94%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE</a></p></li><li><p>怎么配置防御SQL注入攻击<br> Druid提供了WallFilter，它是基于SQL语义分析来实现防御SQL注入攻击的。具体配置看这里：<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter</a></p></li><li><p>Druid有没有参考配置<br> 不同的业务场景需求不同，你可以使用我们的参考配置，但建议你仔细阅读相关文档，了解清楚之后做定制配置。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE</a></p></li><li><p>我想日志记录JDBC执行的SQL，如何配置<br>Druid提供了Log4jFilter、CommonsLogFilter和Slf4jFilter，具体配置看这里<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_LogFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_LogFilter</a></p></li><li><p>我的程序可能产生连接泄漏了，有什么办法？<br>Druid提供了多种监测连接泄漏的手段，具体看这里：<a href="https://github.com/alibaba/druid/wiki/%E8%BF%9E%E6%8E%A5%E6%B3%84%E6%BC%8F%E7%9B%91%E6%B5%8B" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E8%BF%9E%E6%8E%A5%E6%B3%84%E6%BC%8F%E7%9B%91%E6%B5%8B</a></p></li><li><p>在Druid中使用PSCache会有内存占用过大问题么？<br>连接Oracle数据库，打开PSCache，在其他的数据库连接池都会存在内存占用过多的问题，Druid是唯一解决这个问题的连接池。具体看这里：<a href="https://github.com/alibaba/druid/wiki/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8BPreparedStatementCache%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8BPreparedStatementCache%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88</a></p></li><li><p>有没有和其他数据库连接池的对比？<br>各种数据库连接池对比<a href="https://github.com/alibaba/druid/wiki/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%AF%B9%E6%AF%94" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%AF%B9%E6%AF%94</a></p></li><li><p>从其他连接池迁移要注意什么？<br>不同连接池的参数参照对比： <a href="http://code.alibabatech.com/wiki/pages/viewpage.action?pageId=6947005" target="_blank" rel="noopener">http://code.alibabatech.com/wiki/pages/viewpage.action?pageId=6947005</a><br>DBCP迁移 <a href="https://github.com/alibaba/druid/wiki/DBCP%E8%BF%81%E7%A7%BB" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/DBCP%E8%BF%81%E7%A7%BB</a></p></li><li><p>Druid中有没有类似Jboss DataSource中的ExceptionSorter<br>ExceptionSorter是JBoss DataSource中的优秀特性，Druid也有一样功能的ExceptionSorter，但不用手动配置，自动识别生效的。具体看这里：<a href="https://github.com/alibaba/druid/wiki/ExceptionSorter_cn" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/ExceptionSorter_cn</a></p></li><li><p>Druid中的maxIdle为什么是没用的？<br>maxIdle是Druid为了方便DBCP用户迁移而增加的，maxIdle是一个混乱的概念。连接池只应该有maxPoolSize和minPoolSize，druid只保留了maxActive和minIdle，分别相当于maxPoolSize和minPoolSize。</p></li><li><p>我的应用配置的是JNDI数据源，可以用DruidDataSource么？<br>DruidDataSource支持JNDI配置，具体看这里：<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_JNDI_Tomcat" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_JNDI_Tomcat</a><br>具体实现的类是这个：com.alibaba.druid.pool.DruidDataSourceFactory，你可以阅读代码加深理解。</p></li><li><p>我的应用已使用DBCP，是代码中写死的，怎样更换为Druid？<br>可以的，Druid提供了一个中完全平滑迁移DBCP的办法。</p></li></ol><p>1) 从<a href="http://repo1.maven.org/maven2/com/alibaba/druid/druid-wrapper/" target="_blank" rel="noopener">http://repo1.maven.org/maven2/com/alibaba/druid/druid-wrapper/</a> 下载druid-wrapper-xxx.jar<br>2) 加入druid-xxx.jar<br>3) 从你的WEB-INF/lib/中删除dbcp-xxx.jar<br>4) 按需要加上配置，比如JVM启动参数加上-Ddruid.filters=stat，动态配置druid的filters<br>这种用法，使得可以在一些非自己开发的应用中使用Druid，例如在sonar中部署druid，sonar是一个使用jruby开发的web应用，写死了DBCP，只能够通过这种方法来更换。</p><ol start="19"><li><p>我想试用快照版本，怎么获取？<br>直接获取快照版本的地址是：<a href="http://code.alibabatech.com/mvn/snapshots/com/alibaba/druid/" target="_blank" rel="noopener">http://code.alibabatech.com/mvn/snapshots/com/alibaba/druid/</a> ，使用快照版本建议加入我们QQ群 92748305，遇到问题直接反馈给我们。</p></li><li><p>有一些SQL执行很慢，我希望日志记录下来，怎么设置？<br>在StatFilter配置中有慢SQL执行日志记录，看这里<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter</a></p></li><li><p>我希望加密我的数据库密码怎么办？<br>运维和DBA都不希望把密码明文直接写在配置文件中，Druid提供了数据库秘密加密的功能。具体看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></p></li><li><p>如何参与Druid的开发<br>Druid是一个通过github开源的项目，github的特性，使得你很容易参与其中。这里有详细说明<a href="https://github.com/alibaba/druid/wiki/%E5%A6%82%E4%BD%95%E5%8F%82%E4%B8%8E" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E5%A6%82%E4%BD%95%E5%8F%82%E4%B8%8E</a></p></li><li><p>Druid的发布周期是怎样？<br>Druid是一个活跃的项目，长期维护。每个月有一个发布窗口，除非遇到重大bug和非常紧急的需求，否则都是每个月最多发布一次。如果没有足够多的需求，发布窗口就不会被使用。</p></li><li><p>如果DruidDataSource在init的时候失败了，不再使用，是否需要close<br>是的，如果DruidDataSource不再使用，必须调用close来释放资源，释放的资源包括关闭Create和Destory线程。</p></li><li><p>DruidDataSource支持哪些数据库？<br>理论上说，支持所有有jdbc驱动的数据库。实际测试过的有</p></li></ol><p>数据库    支持状态<br>mysql    支持，大规模使用<br>oracle    支持，大规模使用<br>sqlserver    支持<br>postgres    支持<br>db2    支持<br>h2    支持<br>derby    支持<br>sqlite    支持<br>sybase    支持</p><ol start="26"><li><p>Oracle下jdbc executeBatch时，更新行数计算不正确<br>使用jdbc的executeBatch 方法，如果数据库为oracle，则无论是否成功更新到数据，返回值都是-2，而不是真正被sql更新到的记录数，这是Oracle JDBC Driver的问题，Druid不作特殊处理。</p></li><li><p>Druid如何自动根据URL自动识别DriverClass的<br>Druid是根据url前缀来识别DriverClass的，这样使得配置更方便简洁。</p></li></ol><p>前缀    DriverCLass    描述信息<br>jdbc:odps    com.aliyun.odps.jdbc.OdpsDriver<br>jdbc:derby    org.apache.derby.jdbc.EmbeddedDriver<br>jdbc:mysql    com.mysql.jdbc.Driver<br>jdbc:oracle    oracle.jdbc.driver.OracleDriver<br>jdbc:microsoft    com.microsoft.jdbc.sqlserver.SQLServerDriver<br>jdbc:sybase:Tds    com.sybase.jdbc2.jdbc.SybDriver<br>jdbc:jtds    net.sourceforge.jtds.jdbc.Driver<br>jdbc:postgresql    org.postgresql.Driver<br>jdbc:fake    com.alibaba.druid.mock.MockDriver<br>jdbc:mock    com.alibaba.druid.mock.MockDriver<br>jdbc:hsqldb    org.hsqldb.jdbcDriver<br>jdbc:db2    COM.ibm.db2.jdbc.app.DB2Driver    DB2的JDBC Driver十分混乱，这个匹配不一定对<br>jdbc:sqlite    org.sqlite.JDBC<br>jdbc:ingres    com.ingres.jdbc.IngresDriver<br>jdbc:h2    org.h2.Driver<br>jdbc:mckoi    com.mckoi.JDBCDriver<br>jdbc:cloudscape    COM.cloudscape.core.JDBCDriver<br>jdbc:informix-sqli    com.informix.jdbc.IfxDriver<br>jdbc:timesten    com.timesten.jdbc.TimesTenDriver<br>jdbc:as400    com.ibm.as400.access.AS400JDBCDriver<br>jdbc:sapdb    com.sap.dbtech.jdbc.DriverSapDB<br>jdbc:JSQLConnect    com.jnetdirect.jsql.JSQLDriver<br>jdbc:JTurbo    com.newatlanta.jturbo.driver.Driver<br>jdbc:firebirdsql    org.firebirdsql.jdbc.FBDriver<br>jdbc:interbase    interbase.interclient.Driver<br>jdbc:pointbase    com.pointbase.jdbc.jdbcUniversalDriver<br>jdbc:edbc    ca.edbc.jdbc.EdbcDriver<br>jdbc:mimer:multi1    com.mimer.jdbc.Driver     </p><ol start="28"><li><p>如何保存监控记录<br><a href="https://github.com/alibaba/druid/wiki/%E6%80%8E%E4%B9%88%E4%BF%9D%E5%AD%98Druid%E7%9A%84%E7%9B%91%E6%8E%A7%E8%AE%B0%E5%BD%95" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E6%80%8E%E4%B9%88%E4%BF%9D%E5%AD%98Druid%E7%9A%84%E7%9B%91%E6%8E%A7%E8%AE%B0%E5%BD%95</a></p></li><li><p>我想Log输出SQL执行的信息怎么办？<br><a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_LogFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_LogFilter</a></p></li><li><p>如何配置Druid内置的log实现<br><a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AEdruid%E5%86%85%E7%BD%AE%E7%9A%84log%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AEdruid%E5%86%85%E7%BD%AE%E7%9A%84log%E5%AE%9E%E7%8E%B0</a></p></li></ol><p>附：示例项目：<br><a href="https://github.com/windwant/spring-dubbo-service.git" target="_blank" rel="noopener">https://github.com/windwant/spring-dubbo-service.git</a><br><a href="https://github.com/windwant/spring-boot-service.git" target="_blank" rel="noopener">https://github.com/windwant/spring-boot-service.git</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Druid 介绍及配置&lt;/p&gt;
    
    </summary>
    
      <category term="JDBC" scheme="https://shepherd-xie.github.io/categories/JDBC/"/>
    
    
  </entry>
  
  <entry>
    <title>ifream高度问题</title>
    <link href="https://shepherd-xie.github.io/2018/10/31/ifream%E9%AB%98%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <id>https://shepherd-xie.github.io/2018/10/31/ifream高度问题/</id>
    <published>2018-10-31T07:21:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>Add this to your <code>&lt;head&gt;</code> section:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  function resizeIframe(obj) &#123;</span></span><br><span class="line"><span class="undefined">    obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px';</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And change your iframe to this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">onload</span>=<span class="string">"resizeIframe(this)"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>As found on <a href="https://www.sitepoint.com/community/t/auto-height-iframe-content-script/67843" target="_blank" rel="noopener">sitepoint discussion</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Add this to your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
      <category term="前端" scheme="https://shepherd-xie.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>自定义注解</title>
    <link href="https://shepherd-xie.github.io/2018/10/25/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
    <id>https://shepherd-xie.github.io/2018/10/25/自定义注解/</id>
    <published>2018-10-25T09:51:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><a id="more"></a><h3 id="mate-annotation"><a href="#mate-annotation" class="headerlink" title="mate-annotation"></a>mate-annotation</h3><p>元注解是提供给注解的注解。Java5.0定义了4个标准的 meta-annotation 类型，它们被用来提供对其它 annotation 类型作说明。Java5.0 定义的元注解：</p><ul><li><code>@Target</code></li><li><code>@Retention</code></li><li><code>@Documented</code></li><li><code>@Inherited</code></li></ul><h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h3><p><code>@Target</code> 说明了Annotation所修饰的对象范围： Annotation 可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在 Annotation 类型的声明中使用了 target 可更加明晰其修饰的目标。</p><p>取值定义在 <code>ElementType</code> 枚举中：</p><ul><li><code>ElementType.CONSTRUCTOR</code>: 用于描述构造器</li><li><code>ElementType.FIELD</code>: 用于描述域</li><li><code>ElementType.LOCAL_VARIABLE</code>: 用于描述局部变量</li><li><code>ElementType.METHOD</code>: 用于描述方法</li><li><code>ElementType.PACKAGE</code>: 用于描述包</li><li><code>ElementType.PARAMETER</code>: 用于描述参数</li><li><code>ElementType.TYPE</code>: 用于描述类、接口(包括注解类型) 或 <code>enum</code> 声明</li></ul><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><p><code>@Retention</code> 定义了该 Annotation 被保留的时间长短：某些 Annotation 仅出现在源代码中，而被编译器丢弃；而另一些却被编译在 class 文件中；编译在 class 文件中的 Annotation 可能会被虚拟机忽略，而另一些在 class 被装载时将被读取（请注意并不影响 class 的执行，因为 Annotation 与 class 在使用上是被分离的）。使用这个 meta-Annotation 可以对 Annotation 的“生命周期”限制。</p><p>取值定义在 <code>RetentionPoicy</code> 枚举中：</p><ul><li><code>RetentionPoicy.SOURCE</code>: 在源文件中有效</li><li><code>RetentionPoicy.CLASS</code>: 在class文件中有效</li><li><code>RetentionPoicy.RUNTIME</code>: 在运行时有效</li></ul><h3 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h3><p><code>@Documented</code> 用于描述其它类型的 annotation 应该被作为被标注的程序成员的公共API，因此可以被例如 javadoc 此类的工具文档化。<code>@Documented</code> 是一个标记注解，没有成员。</p><h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3><p><code>@Inherited</code> 元注解是一个标记注解，<code>@Inherited</code>表示了被标注的 annotation 是可以被继承的。如果一个使用了 <code>@Inherited</code> 修饰的 annotation 类型被用于一个 class，则这个 annotation 将被用于该 class 的子类。当使用反射获取该某个类的子类 annotation 时也会获取到父类存在有 <code>@inherited</code> 声明的 annotation 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自定义注解&quot;&gt;&lt;a href=&quot;#自定义注解&quot; class=&quot;headerlink&quot; title=&quot;自定义注解&quot;&gt;&lt;/a&gt;自定义注解&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>字节码工具javap</title>
    <link href="https://shepherd-xie.github.io/2018/10/25/%E5%AD%97%E8%8A%82%E7%A0%81%E5%B7%A5%E5%85%B7javap/"/>
    <id>https://shepherd-xie.github.io/2018/10/25/字节码工具javap/</id>
    <published>2018-10-25T08:37:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javap命令详解"><a href="#javap命令详解" class="headerlink" title="javap命令详解"></a><a href="https://blog.csdn.net/zhaozheng7758/article/details/8623526" target="_blank" rel="noopener">javap命令详解</a></h1><a id="more"></a><p>javap是JDK自带的反汇编器，可以查看java编译器为我们生成的字节码。通过它，可以对照源代码和字节码，从而了解很多编译器内部的工作。可以在命令行窗口先用javap -help看下javap工具支持的选项：C:>javap -help </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;javap -help</span><br><span class="line"></span><br><span class="line">Usage: javap &lt;options&gt; &lt;classes&gt;...</span><br><span class="line"></span><br><span class="line">where options include:</span><br><span class="line"></span><br><span class="line">   -c                      输出类中各方法的未解析的代码，即构成java字节码的指令</span><br><span class="line"></span><br><span class="line">   -classpath &lt;pathlist&gt;       指定javap用来查找类的路径。目录用：分隔</span><br><span class="line"></span><br><span class="line">   -extdirs &lt;dirs&gt;             覆盖搜索安装方式扩展的位置，扩展的缺省位置为jre/lib/ext</span><br><span class="line"></span><br><span class="line">   -help                    输出帮助信息</span><br><span class="line"></span><br><span class="line">   -J&lt;flag&gt;                  直接将flag传给运行时系统</span><br><span class="line"></span><br><span class="line">   -l                       输出行及局部变量表</span><br><span class="line"></span><br><span class="line">   -public                   只显示public类及成员</span><br><span class="line"></span><br><span class="line">   -protected                只显示protected和public类及成员。</span><br><span class="line"></span><br><span class="line">   -package                 只显示包、protected和public类及成员，，这是缺省设置</span><br><span class="line"></span><br><span class="line">   -private                  显示所有的类和成员</span><br><span class="line"></span><br><span class="line">   -s                        输出内部类型签名</span><br><span class="line"></span><br><span class="line">   -bootclasspath &lt;pathlist&gt;    指定加载自举类所用的路径，如jre/lib/rt.jar或i18n.jar</span><br><span class="line"></span><br><span class="line">   -verbose                 打印堆栈大小、各方法的locals及args参数，以及class文件的编译版本</span><br></pre></td></tr></table></figure><p>平时一般用-c选项用得比较多，该命令用于列出每个方法所执行的JVM指令，并显示每个方法的字节码的实际作用。可以写个HelloWorld的程序来测试一下该命令。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">           System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    </span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在将该java类编译生成HelloWorld.class文件后，即可通过javap进行具体的反编译分析。如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> javap -cHelloWorld</span><br><span class="line"></span><br><span class="line">Compiled from "HelloWorld.java"</span><br><span class="line"></span><br><span class="line">public class HelloWorld extends java.lang.Object&#123;</span><br><span class="line"></span><br><span class="line">public HelloWorld();</span><br><span class="line"></span><br><span class="line">  Code:</span><br><span class="line"></span><br><span class="line">   0:   aload_0</span><br><span class="line"></span><br><span class="line">   1:   invokespecial   #1; //Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line"></span><br><span class="line">   4:   return</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line"></span><br><span class="line">  Code:</span><br><span class="line"></span><br><span class="line">   0:   getstatic       #2; //Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line"></span><br><span class="line">   3:   ldc     #3; //String Hello World!</span><br><span class="line"></span><br><span class="line">   5:   invokevirtual   #4; //Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line"></span><br><span class="line">   <span class="number">8</span>:   <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了能够更清晰的了解javap反编译生成的字节码，下面来分析main方法中的指令,vcb用于转换Java语言中的代码行System.out.println(“HelloWorld!”);</p><p><code>0:   getstatic       #2; //Fieldjava/lang/System.out:Ljava/io/PrintStream;</code></p><p>最初始的整数表示方法中指令的偏移量，因此第一个指令是从0开始的。它表示的是从java.lang.system对象的out字段中检索PrintStream对象，getstatic指令即是将该静态域压缩并放到操作数栈中。按下来的指令则是引用一个地址，在当前情况下，指的是“#2;//Field java/lang/System.out:Ljava/io/PrintStream;”。在此你将会发现该域信息并没有直接嵌入进来。相反它是通过类似java类中的其它常量一样，该域信息被存储在一个共享池中。采用该常量池的方式能够减小字节码指令的长度。这也就是为什么指令中仅仅保存常量池的地址索引，而非所有的信息。在本示例中，域信息被存放在常量池中标识有#2的位置。</p><p><code>3:   ldc    #3; //String Hello World!</code></p><p>其实分析完第一条指令后，将非常容易的猜测到第二条指令的具体含义了。ldc(load constant)指令用于将HelloWorld！字符串压入至栈中。</p><p><code>5:   invokevirtual   #4; //Method java/io/PrintStream.println:(Ljava/lang/String;)V</code></p><p>该指令将调用println方法，它将从操作栈中弹出两个参数。千成别忘记了象println这样的实例方法其实是包含了两个参数的，一个是字符串，另一个是隐式的this索引。</p><p>上面的minor version: 0和majorversion: 49就是编译Worke.class时使用的jdk编译版本号。</p><p>但是它并不是我们所熟悉的jdk版本号（比如jdk1.5）。</p><p>不过我们可以把从 JDK 1.1 到 JDK 1.7 编译器编译出的 class 的默认minor.major version 汇总下就知道对应关系了。</p><table><thead><tr><th style="text-align:center">JDK 编译器版本</th><th style="text-align:center">target 参数</th><th style="text-align:center">十六进制 minor.major</th><th style="text-align:center">十进制 minor.major</th></tr></thead><tbody><tr><td style="text-align:center">jdk1.1.8</td><td style="text-align:center">不能带 target 参数</td><td style="text-align:center">00 03 00 2D</td><td style="text-align:center">45.3</td></tr><tr><td style="text-align:center">jdk1.2.2</td><td style="text-align:center">不带(默认为 -target 1.1)</td><td style="text-align:center">00 03 00 2D</td><td style="text-align:center">45.3</td></tr><tr><td style="text-align:center">jdk1.2.2</td><td style="text-align:center">-target 1.2</td><td style="text-align:center">00 00 00 2E</td><td style="text-align:center">46.0</td></tr><tr><td style="text-align:center">jdk1.3.1_19</td><td style="text-align:center">不带(默认为 -target 1.1)</td><td style="text-align:center">00 03 00 2D</td><td style="text-align:center">45.3</td></tr><tr><td style="text-align:center">jdk1.3.1_19</td><td style="text-align:center">-target 1.3</td><td style="text-align:center">00 00 00 2F</td><td style="text-align:center">47.0</td></tr><tr><td style="text-align:center">j2sdk1.4.2_10</td><td style="text-align:center">不带(默认为 -target 1.2)</td><td style="text-align:center">00 00 00 2E</td><td style="text-align:center">46.0</td></tr><tr><td style="text-align:center">j2sdk1.4.2_10</td><td style="text-align:center">-target 1.4</td><td style="text-align:center">00 00 00 30</td><td style="text-align:center">48.0</td></tr><tr><td style="text-align:center">jdk1.5.0_11</td><td style="text-align:center">不带(默认为 -target 1.5)</td><td style="text-align:center">00 00 00 31</td><td style="text-align:center">49.0</td></tr><tr><td style="text-align:center">jdk1.5.0_11</td><td style="text-align:center">-target 1.4 -source 1.4</td><td style="text-align:center">00 00 00 30</td><td style="text-align:center">48.0</td></tr><tr><td style="text-align:center">jdk1.6.0_01</td><td style="text-align:center">不带(默认为 -target 1.6)</td><td style="text-align:center">00 00 00 32</td><td style="text-align:center">50.0</td></tr><tr><td style="text-align:center">jdk1.6.0_01</td><td style="text-align:center">-target 1.5</td><td style="text-align:center">00 00 00 31</td><td style="text-align:center">49.0</td></tr><tr><td style="text-align:center">jdk1.6.0_01</td><td style="text-align:center">-target 1.4 -source 1.4</td><td style="text-align:center">00 00 00 30</td><td style="text-align:center">48.0</td></tr><tr><td style="text-align:center">jdk1.7.0</td><td style="text-align:center">不带(默认为 -target 1.6)</td><td style="text-align:center">00 00 00 32</td><td style="text-align:center">50.0</td></tr><tr><td style="text-align:center">jdk1.7.0</td><td style="text-align:center">-target 1.7</td><td style="text-align:center">00 00 00 33</td><td style="text-align:center">51.0</td></tr><tr><td style="text-align:center">jdk1.7.0</td><td style="text-align:center">-target 1.4 -source 1.4</td><td style="text-align:center">00 00 00 30</td><td style="text-align:center">48.0</td></tr><tr><td style="text-align:center">Apache Harmony 5.0M3</td><td style="text-align:center">不带(默认为 -target 1.2)</td><td style="text-align:center">00 00 00 2E</td><td style="text-align:center">46.0</td></tr><tr><td style="text-align:center">Apache Harmony 5.0M3</td><td style="text-align:center">-target 1.4</td><td style="text-align:center">00 00 00 30</td><td style="text-align:center">48.0</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javap命令详解&quot;&gt;&lt;a href=&quot;#javap命令详解&quot; class=&quot;headerlink&quot; title=&quot;javap命令详解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.csdn.net/zhaozheng7758/article/details/8623526&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;javap命令详解&lt;/a&gt;&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JDK内置工具</title>
    <link href="https://shepherd-xie.github.io/2018/10/25/JDK%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7/"/>
    <id>https://shepherd-xie.github.io/2018/10/25/JDK内置工具/</id>
    <published>2018-10-25T08:04:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDK内置工具"><a href="#JDK内置工具" class="headerlink" title="JDK内置工具"></a><a href="https://blog.csdn.net/fenglibing/article/details/6411999" target="_blank" rel="noopener">JDK内置工具</a></h2><a id="more"></a><ul><li>javah命令(C Header and Stub File Generator)</li><li>jps命令(Java Virtual Machine Process Status Tool)</li><li>jstack命令(Java Stack Trace)</li><li>jstat命令(Java Virtual Machine Statistics Monitoring Tool)</li><li>jmap命令(Java Memory Map)</li><li>jinfo命令(Java Configuration Info)</li><li>jconsole命令(Java Monitoring and Management Console)</li><li>jvisualvm命令(Java Virtual Machine Monitoring, Troubleshooting, and Profiling Tool)</li><li>jhat命令(Java Heap Analyse Tool)</li><li>Jdb命令(The Java Debugger)</li><li>Jstatd命令(Java Statistics Monitoring Daemon)</li></ul><h3 id="javah命令"><a href="#javah命令" class="headerlink" title="javah命令"></a>javah命令</h3><p>javah是用于根据JAVA本地方法，生成对应的c语言头文件及相应的stub文件的命令，使用比较简单，使用示例可以查看这篇文章：<a href="https://blog.csdn.net/fenglibing/article/details/4300381" target="_blank" rel="noopener">JNI简单示例,包括C语言实现及调用</a></p><h3 id="jps命令"><a href="#jps命令" class="headerlink" title="jps命令"></a>jps命令</h3><p>1、介绍</p><p>用来查看基于HotSpot的JVM里面中，所有具有访问权限的Java进程的具体状态, 包括进程ID，进程启动的路径及启动参数等等，与unix上的ps类似，只不过jps是用来显示java进程，可以把jps理解为ps的一个子集。</p><p>使用jps时，如果没有指定hostid，它只会显示本地环境中所有的Java进程；如果指定了hostid，它就会显示指定hostid上面的java进程，不过这需要远程服务上开启了jstatd服务，可以参看前面的jstatd章节来启动jstad服务。</p><p>2、命令格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps [ options ] [ hostid ]</span><br></pre></td></tr></table></figure><p>3、常用参数说明</p><ul><li>-q 忽略输出的类名、Jar名以及传递给main方法的参数，只输出pid。</li><li>-m 输出传递给main方法的参数，如果是内嵌的JVM则输出为null。</li><li>-l 输出应用程序主类的完整包名，或者是应用程序JAR文件的完整路径。</li><li>-v 输出传给JVM的参数。</li><li>-V 输出通过标记的文件传递给JVM的参数（.hotspotrc文件，或者是通过参数-XX:Flags=<filename>指定的文件）。</filename></li><li>-J 用于传递jvm选项到由javac调用的java加载器中，例如，“-J-Xms48m”将把启动内存设置为48M，使用-J选项可以非常方便的向基于Java的开发的底层虚拟机应用程序传递参数。</li></ul><p>4、服务器标识</p><p>hostid指定了目标的服务器，它的语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[protocol:][[//]hostname][:port][/servername]</span><br></pre></td></tr></table></figure></p><ul><li>protocol - 如果protocol及hostname都没有指定，那表示的是与当前环境相关的本地协议，如果指定了hostname却没有指定protocol，那么protocol的默认就是rmi。</li><li>hostname - 服务器的IP或者名称，没有指定则表示本机。</li><li>port - 远程rmi的端口，如果没有指定则默认为1099。</li><li>Servername - 注册到RMI注册中心中的jstatd的名称。</li></ul><p>5、使用示例</p><p>5.1、列出本地的Java进程</p><p>不带任何参数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fenglibin@libin:~$ jps</span><br><span class="line">11644 Main</span><br><span class="line">1947 </span><br><span class="line">12843 Jps</span><br></pre></td></tr></table></figure></p><p>带-v参数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fenglibin@libin:~$ jps -v</span><br><span class="line">11644 Main -agentlib:jdwp=transport=dt_socket,suspend=y,address=localhost:43467 -Dfile.encoding=GBK</span><br><span class="line">1947  -Dosgi.requiredJavaVersion=1.5 -XX:MaxPermSize=256m -Xms40m -Xmx512m</span><br><span class="line">12858 Jps -Denv.class.path=/home/fenglibin/java6/lib/dt.jar:/home/fenglibin/java6/lib/tools.jar::/usr/bin/libtool:/usr/bin/autoconf:/usr/local/BerkeleyDB.4.8/lib -Dapplication.home=/home/fenglibin/java6 -Xms8m</span><br></pre></td></tr></table></figure></p><p>带-l参数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fenglibin@libin:~$ jps -l</span><br><span class="line">11644 com.alibaba.china.webww.core.Main</span><br><span class="line">12870 sun.tools.jps.Jps</span><br><span class="line">1947</span><br></pre></td></tr></table></figure></p><p>5.2、列出远程的Java进程</p><p>在jstatd章节，我们有通过：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmiregistry 2020&amp;jstatd -J-Djava.security.policy=all.policy -p 2020 -n AlternateJstatdServerName</span><br></pre></td></tr></table></figure></p><p>启动了名为AlternateJstatdServerName的jstatd服务，那么我们此时就可以通过该服务列出其有权限访问的Java进程。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fenglibin@libin:~$ jps 10.1.1.234:2020/AlternateJstatdServerName</span><br><span class="line">29556 Bootstrap</span><br><span class="line">28671 WSPreLauncher</span><br><span class="line">2602 RegistryImpl</span><br><span class="line">18272 Test</span><br><span class="line">2603 Jstatd</span><br></pre></td></tr></table></figure></p><h3 id="jstack命令"><a href="#jstack命令" class="headerlink" title="jstack命令"></a>jstack命令</h3><p>1、介绍<br>jstack用于打印出给定的java进程ID或core file或远程调试服务的Java堆栈信息，如果是在64位机器上，需要指定选项”-J-d64”，Windows的jstack使用方式只支持以下的这种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack [-l] pid</span><br></pre></td></tr></table></figure></p><p>如果java程序崩溃生成core文件，jstack工具可以用来获得core文件的java stack和native stack的信息，从而可以轻松地知道java程序是如何崩溃和在程序何处发生问题。另外，jstack工具还可以附属到正在运行的java程序中，看到当时运行的java程序的java stack和native stack的信息, 如果现在运行的java程序呈现hung的状态，jstack是非常有用的。</p><p>2、命令格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jstack [ option ] pid</span><br><span class="line">jstack [ option ] executable core</span><br><span class="line">jstack [ option ] [server-id@]remote-hostname-or-IP</span><br></pre></td></tr></table></figure></p><p>3、常用参数说明<br>1)、options： </p><ul><li>executable Java executable from which the core dump was produced.(可能是产生core dump的java可执行程序)</li><li>core 将被打印信息的core dump文件</li><li>remote-hostname-or-IP 远程debug服务的主机名或ip</li><li>server-id 唯一id,假如一台主机上多个远程debug服务 </li></ul><p>2）、基本参数：</p><ul><li>-F当’jstack [-l] pid’没有相应的时候强制打印栈信息</li><li>-l长列表. 打印关于锁的附加信息,例如属于java.util.concurrent的ownable synchronizers列表.</li><li>-m打印java和native c/c++框架的所有栈信息.</li><li>-h | -help打印帮助信息</li><li>pid 需要被打印配置信息的java进程id,可以用jps查询.</li></ul><h3 id="jstat命令"><a href="#jstat命令" class="headerlink" title="jstat命令"></a>jstat命令</h3><p>1、介绍<br>Jstat用于监控基于HotSpot的JVM，对其堆的使用情况进行实时的命令行的统计，使用jstat我们可以对指定的JVM做如下监控：</p><ul><li>类的加载及卸载情况</li><li>查看新生代、老生代及持久代的容量及使用情况</li><li>查看新生代、老生代及持久代的垃圾收集情况，包括垃圾回收的次数及垃圾回收所占用的时间</li><li>查看新生代中Eden区及Survior区中容量及分配情况等</li></ul><p>jstat工具特别强大，它有众多的可选项，通过提供多种不同的监控维度，使我们可以从不同的维度来了解到当前JVM堆的使用情况。详细查看堆内各个部分的使用量，使用的时候必须加上待统计的Java进程号，可选的不同维度参数以及可选的统计频率参数。</p><p>它主要是用来显示GC及PermGen相关的信息，如果对GC不怎么了解，先看这篇文章：<a href="http://blog.csdn.net/fenglibing/archive/2011/04/13/6321453.aspx，否则其中即使你会使用jstat这个命令，你也看不懂它的输出。" target="_blank" rel="noopener">http://blog.csdn.net/fenglibing/archive/2011/04/13/6321453.aspx，否则其中即使你会使用jstat这个命令，你也看不懂它的输出。</a></p><p>2、语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat [ generalOption | outputOptions vmid [interval[s|ms] [count]] ]</span><br></pre></td></tr></table></figure></p><ul><li>generalOption - 单个的常用的命令行选项，如-help, -options, 或 -version。</li><li>outputOptions -一个或多个输出选项，由单个的statOption选项组成，可以和-t, -h, and -J等选项配合使用。</li></ul><p>statOption：<br>根据jstat统计的维度不同，可以使用如下表中的选项进行不同维度的统计，不同的操作系统支持的选项可能会不一样，可以通过-options选项，查看不同操作系统所支持选项，如：</p><table><thead><tr><th style="text-align:center">Option</th><th style="text-align:center">Displays…</th></tr></thead><tbody><tr><td style="text-align:center">class</td><td style="text-align:center">用于查看类加载情况的统计</td></tr><tr><td style="text-align:center">compiler</td><td style="text-align:center">用于查看HotSpot中即时编译器编译情况的统计</td></tr><tr><td style="text-align:center">gc</td><td style="text-align:center">用于查看JVM中堆的垃圾收集情况的统计</td></tr><tr><td style="text-align:center">gccapacity</td><td style="text-align:center">用于查看新生代、老生代及持久代的存储容量情况</td></tr><tr><td style="text-align:center">gccause</td><td style="text-align:center">用于查看垃圾收集的统计情况（这个和-gcutil选项一样），如果有发生垃圾收集，它还会显示最后一次及当前正在发生垃圾收集的原因。</td></tr><tr><td style="text-align:center">gcnew</td><td style="text-align:center">用于查看新生代垃圾收集的情况</td></tr><tr><td style="text-align:center">gcnewcapacity</td><td style="text-align:center">用于查看新生代的存储容量情况</td></tr><tr><td style="text-align:center">gcold</td><td style="text-align:center">用于查看老生代及持久代发生GC的情况</td></tr><tr><td style="text-align:center">gcoldcapacity</td><td style="text-align:center">用于查看老生代的容量</td></tr><tr><td style="text-align:center">gcpermcapacity</td><td style="text-align:center">用于查看持久代的容量</td></tr><tr><td style="text-align:center">gcutil</td><td style="text-align:center">用于查看新生代、老生代及持代垃圾收集的情况</td></tr><tr><td style="text-align:center">printcompilation</td><td style="text-align:center">HotSpot编译方法的统计</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JDK内置工具&quot;&gt;&lt;a href=&quot;#JDK内置工具&quot; class=&quot;headerlink&quot; title=&quot;JDK内置工具&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.csdn.net/fenglibing/article/details/6411999&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JDK内置工具&lt;/a&gt;&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java内省机制</title>
    <link href="https://shepherd-xie.github.io/2018/10/25/Java%E5%86%85%E7%9C%81/"/>
    <id>https://shepherd-xie.github.io/2018/10/25/Java内省/</id>
    <published>2018-10-25T08:02:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java内省机制"><a href="#Java内省机制" class="headerlink" title="Java内省机制"></a>Java内省机制</h2><p>内省( Introspector ) 是 Java 语言对 JavaBean 类属性、事件的一种缺省处理方法。</p><a id="more"></a><p>JavaBean是一种特殊的类，主要用于传递数据信息，这种类中的方法主要用于访问私有的字段，且方法名符合某种命名规则。如果在两个模块之间传递信息，可以将信息封装进 JavaBean 中，这种对象称为“值对象”( Value Object )，或“ VO ”。方法比较少。这些信息储存在类的私有变量中，通过 <code>setter/getter</code> 获得。</p><p>Java JDK 中提供了一套 API 用来访问某个属性的 <code>getter/setter</code> 方法，这就是内省。</p><h2 id="JDK内省类库"><a href="#JDK内省类库" class="headerlink" title="JDK内省类库"></a>JDK内省类库</h2><h3 id="PropertyDescriptor类"><a href="#PropertyDescriptor类" class="headerlink" title="PropertyDescriptor类"></a><code>PropertyDescriptor</code>类</h3><p><code>PropertyDescriptor</code>类表示 JavaBean 类通过存储器导出一个属性。主要方法：</p><ol><li><code>getPropertyType()</code>，获得属性的 Class 对象;</li><li><code>getReadMethod()</code>，获得用于读取属性值的方法；</li><li><code>getWriteMethod()</code>，获得用于写入属性值的方法;</li><li><code>hashCode()</code>，获取对象的哈希值;</li><li><code>setReadMethod(Method readMethod)</code>，设置用于读取属性值的方法;</li><li><code>setWriteMethod(Method writeMethod)</code>，设置用于写入属性值的方法。</li></ol><h3 id="Introspector类"><a href="#Introspector类" class="headerlink" title="Introspector类"></a><code>Introspector</code>类</h3><p>将 JavaBean 中的属性封装起来进行操作。在程序把一个类当做 JavaBean 来看，就是调用 <code>Introspector.getBeanInfo()</code> 方法，得到的 BeanInfo 对象封装了把这个类当做 JavaBean 看的结果信息，即属性的信息。</p><h3 id="BeanUtils工具包"><a href="#BeanUtils工具包" class="headerlink" title="BeanUtils工具包"></a><code>BeanUtils</code>工具包</h3><p>Apache开发了一套简单、易用的API来操作Bean的属性——BeanUtils工具包。</p><p><a href="http://commons.apache.org/beanutils/" target="_blank" rel="noopener">BeanUtils工具包</a></p><p>注意：应用的时候还需要一个<a href="http://commons.apache.org/logging/" target="_blank" rel="noopener">logging包</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java内省机制&quot;&gt;&lt;a href=&quot;#Java内省机制&quot; class=&quot;headerlink&quot; title=&quot;Java内省机制&quot;&gt;&lt;/a&gt;Java内省机制&lt;/h2&gt;&lt;p&gt;内省( Introspector ) 是 Java 语言对 JavaBean 类属性、事件的一种缺省处理方法。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java8内存模型</title>
    <link href="https://shepherd-xie.github.io/2018/10/25/Java8%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>https://shepherd-xie.github.io/2018/10/25/Java8内存模型/</id>
    <published>2018-10-25T06:31:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java8内存模型"><a href="#Java8内存模型" class="headerlink" title="Java8内存模型"></a>Java8内存模型</h2><a id="more"></a><p><img src="assets/java_runtime_data_areas.jpg" alt="Java8内存模型"></p><p><img src="assets/Cookbook_JVMArguments_2_MemoryModel.png" alt="区域的内存大小"></p><table><thead><tr><th style="text-align:center">控制参数</th><th style="text-align:center">使用说明</th></tr></thead><tbody><tr><td style="text-align:center">-Xms</td><td style="text-align:center">设置堆的最小空间大小</td></tr><tr><td style="text-align:center">-Xmx</td><td style="text-align:center">设置堆的最大空间大小</td></tr><tr><td style="text-align:center">-XX:NewSize</td><td style="text-align:center">设置新生代最小空间大小</td></tr><tr><td style="text-align:center">-XX:MaxNewSize</td><td style="text-align:center">设置新生代最大空间大小</td></tr><tr><td style="text-align:center">-XX:PermSize</td><td style="text-align:center">设置永久代最小空间大小</td></tr><tr><td style="text-align:center">-XX:MaxPermSize</td><td style="text-align:center">设置永久代最大空间大小</td></tr><tr><td style="text-align:center">-Xss</td><td style="text-align:center">设置每个线程的堆栈大小</td></tr></tbody></table><ol><li>HEAP：<br>堆内存由JVM在程序启动时创建，用于存储对象。堆内存可以被任何线程访问，进一步分为三代<code>Young Generation</code>，<code>Old</code>＆<code>PermGen</code>（永久生成）。当对象被创建时，它首先进入Young代（尤其是Eden空间），当对象变老时，它会移动到Old / tenured Generation。在PermGen空间中，存储所有静态和实例变量名称 - 值对（对象的名称引用）。</li><li>Stack：<br>使用程序创建的每个线程生成堆栈。它由线程关联。每个线程都有自己的堆栈。所有局部变量和函数调用都存储在堆栈中。它的生命取决于线程的生命，因为线程将存在，它也将存在，反之亦然。它也可以手动增加</li><li>PC寄存器：<br>它也与其线程相关联。它基本上是正在执行的当前指令的地址。由于每个线程将要执行的一些方法集取决于PC寄存器。它对每个指令都有一些值，对于本机方法是未定义的。通常用于跟踪指令。</li><li>Method Area：<br>它是像Heap这样的所有线程共享的内存。它是在Java Virtual Machine启动时创建的。它包含代码实际上是编译的代码，方法及其数据和字段。运行时常量池也是方法区域的一部分。它的内存默认由JVM分配，如果需要可以增加。运行时常量池是常量表的每个类表示。它包含在编译时定义的所有文字和将在运行时解决的引用。</li><li>Native方法堆栈本：<br>机方法是用java以外的语言编写的方法。JVM实现无法加载本机方法，也无法依赖传统堆栈。它还与每个线程相关联。简而言之，它与堆栈相同，但它用于本机方法。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java8内存模型&quot;&gt;&lt;a href=&quot;#Java8内存模型&quot; class=&quot;headerlink&quot; title=&quot;Java8内存模型&quot;&gt;&lt;/a&gt;Java8内存模型&lt;/h2&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://shepherd-xie.github.io/categories/JVM/"/>
    
    
  </entry>
  
  <entry>
    <title>Shiro</title>
    <link href="https://shepherd-xie.github.io/2018/10/09/shiro/"/>
    <id>https://shepherd-xie.github.io/2018/10/09/shiro/</id>
    <published>2018-10-09T07:02:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考Apache-Shiro-Reference-Documentation"><a href="#参考Apache-Shiro-Reference-Documentation" class="headerlink" title="参考Apache Shiro Reference Documentation"></a><em>参考</em><a href="https://shiro.apache.org/reference.html#apache-shiro-reference-documentation" target="_blank" rel="noopener">Apache Shiro Reference Documentation</a></h2><a id="more"></a><h2 id="1-QuickStart"><a href="#1-QuickStart" class="headerlink" title="1. QuickStart"></a>1. QuickStart</h2><p>Apache Shiro是一个具有许多功能的综合应用程序安全框架。</p><p><img src="https://shiro.apache.org/assets/images/ShiroFeatures.png" alt="img"></p><p>Shiro针对Shiro开发团队所称的“应用程序安全的四大基石” - 身份验证，授权，会话管理和加密：</p><ul><li><strong>Authentication：</strong>有时也称为“登录”，这是证明用户是他们所说的人的行为。</li><li><strong>Authorization：</strong>访问控制的过程，即确定“谁”可以访问“什么”。</li><li><strong>Session Management：</strong>即使在非Web或EJB应用程序中，也可以管理特定于用户的会话。</li><li><strong>Cryptography：</strong>使用加密算法保持数据安全，同时仍然易于使用。</li></ul><p>在不同的应用程序环境中还有其他功能可以支持和强化这些问题，尤其是：</p><ul><li>Web支持：Shiro的Web支持API可帮助轻松保护Web应用程序。</li><li>缓存：缓存是Apache Shiro API中的第一层公民，可确保安全操作保持快速高效。</li><li>并发：Apache Shiro支持具有并发功能的多线程应用程序。</li><li>测试：存在测试支持以帮助您编写单元和集成测试，并确保您的代码按预期受到保护。</li><li>“运行方式”：允许用户假定其他用户的身份（如果允许）的功能，有时在管理方案中很有用。</li><li>“记住我”：记住用户在会话中的身份，这样他们只需要在强制要求时登录。</li></ul><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;参考Apache-Shiro-Reference-Documentation&quot;&gt;&lt;a href=&quot;#参考Apache-Shiro-Reference-Documentation&quot; class=&quot;headerlink&quot; title=&quot;参考Apache Shiro Reference Documentation&quot;&gt;&lt;/a&gt;&lt;em&gt;参考&lt;/em&gt;&lt;a href=&quot;https://shiro.apache.org/reference.html#apache-shiro-reference-documentation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache Shiro Reference Documentation&lt;/a&gt;&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JNI简单示例</title>
    <link href="https://shepherd-xie.github.io/2018/09/04/JNI/"/>
    <id>https://shepherd-xie.github.io/2018/09/04/JNI/</id>
    <published>2018-09-04T02:14:00.000Z</published>
    <updated>2021-02-09T03:02:13.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JNI简单示例"><a href="#JNI简单示例" class="headerlink" title="JNI简单示例"></a>JNI简单示例</h2><a id="more"></a><p><strong>原贴地址<a href="https://blog.csdn.net/fenglibing/article/details/4300381" target="_blank" rel="noopener">JNI简单示例,包括C语言实现及调用</a></strong></p><p><em>JNI（Java Native Interface）</em>是Java本地方法调用接口，从Java1.1开始，Java Native Interface(JNI)标准就成为java平台的一部分，它允许Java代码和其他语言写的代码进行交互。JNI一开始是为了本地已编译语言，尤其是C和C++而设计的，但是它并不妨碍你使用其他语言，只要调用约定受支持就可以了。</p><p>Java中很多地方都使用到了JNI，如System.arrayCopy方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object array1, <span class="keyword">int</span> start1, Object array2, <span class="keyword">int</span> start2, <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure><p>那Java中为什么要使用JNI呢？这与Java产生的历史就有一定的关系了，Java刚开始被设计的时候就是为了跨平台，Java的字节码由JVM运行。Java跨平台是非常好的设计理念，这避免了因为换平台而不得不重新写一套代码的麻烦，可正是为了实现这样的特性，Java也失去了一些特性，如对操作系统底层的调用限制。JNI可以实现对操作系统底层的调用，JNI可以用来提高调用的速度，如我们上面提到的System.arrayCopy方法，它是直接和操作系统的内存进行交互，而省去了JVM和操作系统进行内存交换的步骤；JNI的另一个使用场景就是某些核心类库的实现可能需要跨包调用或者需要绕过其他Java安全性检查，如Java中的sun.misc.Unsaef实现。</p><p>下面我们用两个实例来说明，如何创建自己的DLL，以及如何通过Java去调用这些DLL。</p><p>示例一、不传参数的简单调用</p><p>这个示例很简单，没有输入参数也没有输出参数，只是通过Java调用JNI方法，并把JNI中输出的一句话给显示出来。如果是涉及到输入输出参数的本地方法调用，相对就会麻烦一点，因为Java中的参数和DLL中的参数类型是不一样的，这时就需要一个中间转换间，如SWIG（Simplified Wrapper and Interface Generator）简单包装及接口生成器，这个后面会有介绍。</p><p>1、Java的操作步骤</p><p>1）、首先准备一个具有本地方法的Java文件JNITest，输入内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNITest</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 建立一个无返回参数的方法，该方法只在DLL方法内打印一条语句。 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）、使用Javac编译该Java文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac test/JNITest.java</span><br></pre></td></tr></table></figure></p><p>注：编译一定要在test包外操作，否则会报错。<br>3）、使用Javah生成头文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javah test.JNITest</span><br></pre></td></tr></table></figure></p><p>注：也是要在test包外操作<br>操作完成后，我们可以看到_头文件”test_JNITest.h”_，它的命令方式是以包名加类名的方式，其内容如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class test_JNITest */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_test_JNITest</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_test_JNITest</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     test_JNITest</span></span><br><span class="line"><span class="comment"> * Method:    test</span></span><br><span class="line"><span class="comment"> * Signature: ()I</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jint JNICALL Java_test_JNITest_test</span><br><span class="line">  (JNIEnv *, jobject);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>正如文件头部所说，不要对这个生成文件进行任何的修改一样，然后通过C实现该方法即可：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_test_JNITest_test</span> <span class="params">(JNIEnv *, jobject)</span></span>;</span><br></pre></td></tr></table></figure></p><p>然后我们将实现后的C，编译成DLL，再将DLL放到操作系统的PATH中，如我是WINDOWS中，将其放到system32路径下即可，DLL的名称没有关系。<br>4）、执行测试结果</p><p>建立一个测试类JNITestCaller<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNITestCaller</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// 在系统路径中（如system32）加载名为JNITest.dll文件</span></span><br><span class="line">System.loadLibrary(<span class="string">"JNITest"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span> </span>&#123;</span><br><span class="line">JNITest jniTest = <span class="keyword">new</span> JNITest();</span><br><span class="line">jniTest.test();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过javac编译该Java类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac test/JNITestCaller</span><br></pre></td></tr></table></figure></p><p>然后执行它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java test.JNITestCaller</span><br></pre></td></tr></table></figure></p><p>如果控制台打印出<em>“=====888”字符串</em>，则表示通过JNI调用DLL成功且执行成功，如果不成功则检查步骤是否有遗漏。</p><p>2、DLL编译的步骤</p><p>1）、安装VC6， VS太大了，我等也不常用，这个可以了；</p><p>2）、启动VC6，新建DLL工程，通过“File-&gt;New…-&gt;Dll工程”，名称就命名为JNITest吧，到时编译过后的DLL名称就是JNITest.dll，如果是其它的名称，在编译成DLL后需要改一下名称；</p><p>3）、新建C++</p><p>选中新建工程JNITest，然后点击菜单中的“File-&gt;New…-&gt;C++ Source File”，文件的名称可以任意，在其中输入如下代码：</p><p>在其中输入如下如下代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;test_JNITest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*这个方法名称一定要和头文件的一模一样，不过头文件中的参数只有类型，没有名称，需要加成如下参数*/</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_test_JNITest_test</span><span class="params">(JNIEnv *jenv, jobject jobj)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*就打印这一条语句*/</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"=====888"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>4）、将%JAVA_HOME%/include/win32下面的jawt_md.h、jni_mh.h，以及%JAVA_HOME%/include/jni.h，这三个文件拷贝到%VS_HOME%/VC98/Include下面，生成的头文件test_JNITest.h也可以拷贝到那个目录，省去指定头文件的路径步骤；<br>5）、点击C++的编译按钮（或者CTRL+F7），不报错则通过，则点击生成DLL文件的按钮（或者F7），到%VS_HOME%/MyProject/JNITest目录，将JNITest.dll文件拷贝到system32目录就可以了。</p><p>示例二、有输入输出参数的调用，需要借助工具SWIG（Simplified Wrapper and Interface Generator）</p><p>Java中JNI的操作，最难的就是Java与Dll之间参数的传递与转换了，因为JAVA中的参数与C中的参数是不能够直接匹配的，如果我们手工去处理，还真的有点麻烦。这个时候我们可以通过SWIG这个工具来做参数的包装，它可以帮忙做传入传出参数之间的转换，我们现在上面的基础之上，将原来的void且不传参数的方法，改成传入两个字符串，返回的结果为这两个字符串的组合，如传入参数为”A”、”B”，则输出结果为”AB”，操作步骤如下：</p><p>1、Java中的操作</p><p>Java中需要将Native方法增加两个输入参数以及修改返回参数，这个Native方法的功能就是返回两个输入参数的拼接结果，如参数输入“A”和“B”，那要得到的结果是“AB”，修改后的包含Native方法的类的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNITest</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 建立一个无返回参数的方法，该方法只在DLL方法内打印一条语句。 另外就是传参的处理要相对复杂点，后面介绍。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">test</span><span class="params">(String a, String b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">    此时我们的测试代码也会有一点点小小的改变，增加传入参数以及获取返回结果，修改后的JNITestCaller代码如下：</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNITestCaller</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// 在系统路径中（如system32）加载名为JNITest.dll文件</span></span><br><span class="line">System.loadLibrary(<span class="string">"JNITest"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span> </span>&#123;</span><br><span class="line">JNITest jniTest = <span class="keyword">new</span> JNITest();</span><br><span class="line">String a = <span class="string">"A"</span>, b = <span class="string">"B"</span>;</span><br><span class="line">String result = jniTest.test(a, b);</span><br><span class="line">System.out.println(<span class="string">"The execute result is:"</span> + result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们按照上面的操作，并可以在最后得到输出结果“AB”，那么就表示我们的操作成功了。</p><p>2、DLL编译的步骤</p><p>1）、首先是下载SWIG，要包括WIN的那个版本，这个版本才有SWIG.EXE这个文件；</p><p>2）、然后设置SWIG当前路径到PATH中，因为执行SWIG命令的时候需要用到；</p><p>3）、编写”.i”文件如“I.i”，这个文件里面定义要生成的C方法是什么，这个方法就是要实现的方法，具体怎么写就需要看看SWIG的示例与帮助文档了，里面还是挺丰富的；</p><p>4）、执行命令“swig -java -c++ I.i”，会生成C语言包装、C++包装、两个JAVA文件，其中包括了声明本地native方法类，以及引用方法native方法的类，但是在实现类中没有实现MAIN方法以及通过System.loadLibary的方法加载DLL，这两个需要用户自己完成。</p><p>注：用户需要自己通过C或者是C++实现在”.i”文件中声明的方法，才可以成功编译，因为C及C++的包装文件中会引用这个方法，我们不需要修改包装文件，直接在另外一个C或者是C++文件中实现那个文件即可。</p><p>5）、调用和上面的一样，编译JAVA，执行JAVA，不过不用调用JAVAH生成H头文件了，因为由SWIG已经生成了对应的包装文件。</p><p>这个没有给出示例，因为SWIG生成的包装文件比较大，它其中做了字符的转换，有了上面的基础，再通过SWIG去实现，应该没有多大难度。</p><p>注：DLL的步骤，后面会补充完整。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JNI简单示例&quot;&gt;&lt;a href=&quot;#JNI简单示例&quot; class=&quot;headerlink&quot; title=&quot;JNI简单示例&quot;&gt;&lt;/a&gt;JNI简单示例&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
